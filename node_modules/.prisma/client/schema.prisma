generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model EmpresaLogo {
  idFoto  Int      @id @default(autoincrement())
  foto    String   @db.VarChar(512)
  Empresa Empresa?
}

model Empresa {
  id           Int          @id @default(autoincrement())
  nombre       String       @db.VarChar(30)
  industria    String?      @db.VarChar(30)
  preferencias String?      @db.VarChar(500)
  idFoto       Int?         @unique
  EmpresaLogo  EmpresaLogo? @relation(fields: [idFoto], references: [idFoto], onDelete: Cascade)
  clientes     Cliente[]
}

model ClienteFoto {
  idFoto  Int      @id @default(autoincrement())
  foto    String   @db.VarChar(512)
  Cliente Cliente?
}

model Cliente {
  id            Int           @id @default(autoincrement())
  correo        String        @db.VarChar(50)
  nombre        String        @db.VarChar(50)
  idEmpresa     Int
  telefono      String        @db.VarChar(11)
  idFoto        Int?          @unique
  ClienteFoto   ClienteFoto?  @relation(fields: [idFoto], references: [idFoto], onDelete: Cascade)
  empresa       Empresa       @relation(fields: [idEmpresa], references: [id])
  negociaciones Negociacion[]
}

model Usuario {
  id            Int           @id @default(autoincrement())
  nombre        String        @db.VarChar(50)
  email         String        @unique @db.VarChar(50)
  contrasena    String        @db.VarChar(512)
  negociaciones Negociacion[]
}

model Negociacion {
  id          Int                   @id @default(autoincrement())
  idUsuarios  Int
  idClientes  Int
  idEstado    Int
  fecha       DateTime
  asunto      String                @db.VarChar(50)
  descripcion String                @db.VarChar(500)
  comision    Float
  total       Float
  cliente     Cliente               @relation(fields: [idClientes], references: [id])
  estado      Estado                @relation(fields: [idEstado], references: [id])
  usuario     Usuario               @relation(fields: [idUsuarios], references: [id])
  productos   ProductoNegociacion[]
}

model Estado {
  id            Int           @id @default(autoincrement())
  estado        String        @db.VarChar(20)
  negociaciones Negociacion[]
}

model ProductoServicioFoto {
  idFoto           Int              @id @default(autoincrement())
  foto             String           @db.VarChar(512)
  productoId       Int              @unique
  ProductoServicio ProductoServicio @relation("ProductoFoto", fields: [productoId], references: [id], onDelete: Cascade)
}

model ProductoServicio {
  id                   Int                   @id @default(autoincrement())
  nombre               String                @db.VarChar(30)
  precio               Float
  stock                Int
  ProductoServicioFoto ProductoServicioFoto? @relation("ProductoFoto")
  negociaciones        ProductoNegociacion[]
}

model ProductoNegociacion {
  idProducto    Int
  idNegociacion Int
  cantidad      Int
  subtotal      Float
  negociacion   Negociacion      @relation(fields: [idNegociacion], references: [id])
  producto      ProductoServicio @relation(fields: [idProducto], references: [id])

  @@id([idProducto, idNegociacion])
}
