
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Empresa
 * 
 */
export type Empresa = $Result.DefaultSelection<Prisma.$EmpresaPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Negociacion
 * 
 */
export type Negociacion = $Result.DefaultSelection<Prisma.$NegociacionPayload>
/**
 * Model Estado
 * 
 */
export type Estado = $Result.DefaultSelection<Prisma.$EstadoPayload>
/**
 * Model ProductoServicio
 * 
 */
export type ProductoServicio = $Result.DefaultSelection<Prisma.$ProductoServicioPayload>
/**
 * Model ProductoNegociacion
 * 
 */
export type ProductoNegociacion = $Result.DefaultSelection<Prisma.$ProductoNegociacionPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Empresas
 * const empresas = await prisma.empresa.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Empresas
   * const empresas = await prisma.empresa.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.empresa`: Exposes CRUD operations for the **Empresa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empresas
    * const empresas = await prisma.empresa.findMany()
    * ```
    */
  get empresa(): Prisma.EmpresaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.negociacion`: Exposes CRUD operations for the **Negociacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Negociacions
    * const negociacions = await prisma.negociacion.findMany()
    * ```
    */
  get negociacion(): Prisma.NegociacionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.estado`: Exposes CRUD operations for the **Estado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estados
    * const estados = await prisma.estado.findMany()
    * ```
    */
  get estado(): Prisma.EstadoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productoServicio`: Exposes CRUD operations for the **ProductoServicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductoServicios
    * const productoServicios = await prisma.productoServicio.findMany()
    * ```
    */
  get productoServicio(): Prisma.ProductoServicioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productoNegociacion`: Exposes CRUD operations for the **ProductoNegociacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductoNegociacions
    * const productoNegociacions = await prisma.productoNegociacion.findMany()
    * ```
    */
  get productoNegociacion(): Prisma.ProductoNegociacionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Empresa: 'Empresa',
    Cliente: 'Cliente',
    Usuario: 'Usuario',
    Negociacion: 'Negociacion',
    Estado: 'Estado',
    ProductoServicio: 'ProductoServicio',
    ProductoNegociacion: 'ProductoNegociacion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "empresa" | "cliente" | "usuario" | "negociacion" | "estado" | "productoServicio" | "productoNegociacion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Empresa: {
        payload: Prisma.$EmpresaPayload<ExtArgs>
        fields: Prisma.EmpresaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmpresaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmpresaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findFirst: {
            args: Prisma.EmpresaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmpresaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          findMany: {
            args: Prisma.EmpresaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>[]
          }
          create: {
            args: Prisma.EmpresaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          createMany: {
            args: Prisma.EmpresaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmpresaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          update: {
            args: Prisma.EmpresaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          deleteMany: {
            args: Prisma.EmpresaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmpresaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmpresaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmpresaPayload>
          }
          aggregate: {
            args: Prisma.EmpresaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmpresa>
          }
          groupBy: {
            args: Prisma.EmpresaGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmpresaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmpresaCountArgs<ExtArgs>
            result: $Utils.Optional<EmpresaCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Negociacion: {
        payload: Prisma.$NegociacionPayload<ExtArgs>
        fields: Prisma.NegociacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NegociacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NegociacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload>
          }
          findFirst: {
            args: Prisma.NegociacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NegociacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload>
          }
          findMany: {
            args: Prisma.NegociacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload>[]
          }
          create: {
            args: Prisma.NegociacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload>
          }
          createMany: {
            args: Prisma.NegociacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NegociacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload>
          }
          update: {
            args: Prisma.NegociacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload>
          }
          deleteMany: {
            args: Prisma.NegociacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NegociacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NegociacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NegociacionPayload>
          }
          aggregate: {
            args: Prisma.NegociacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNegociacion>
          }
          groupBy: {
            args: Prisma.NegociacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<NegociacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.NegociacionCountArgs<ExtArgs>
            result: $Utils.Optional<NegociacionCountAggregateOutputType> | number
          }
        }
      }
      Estado: {
        payload: Prisma.$EstadoPayload<ExtArgs>
        fields: Prisma.EstadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findFirst: {
            args: Prisma.EstadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findMany: {
            args: Prisma.EstadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          create: {
            args: Prisma.EstadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          createMany: {
            args: Prisma.EstadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EstadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          update: {
            args: Prisma.EstadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          deleteMany: {
            args: Prisma.EstadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EstadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EstadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          aggregate: {
            args: Prisma.EstadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEstado>
          }
          groupBy: {
            args: Prisma.EstadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EstadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstadoCountArgs<ExtArgs>
            result: $Utils.Optional<EstadoCountAggregateOutputType> | number
          }
        }
      }
      ProductoServicio: {
        payload: Prisma.$ProductoServicioPayload<ExtArgs>
        fields: Prisma.ProductoServicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductoServicioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductoServicioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload>
          }
          findFirst: {
            args: Prisma.ProductoServicioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductoServicioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload>
          }
          findMany: {
            args: Prisma.ProductoServicioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload>[]
          }
          create: {
            args: Prisma.ProductoServicioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload>
          }
          createMany: {
            args: Prisma.ProductoServicioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductoServicioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload>
          }
          update: {
            args: Prisma.ProductoServicioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload>
          }
          deleteMany: {
            args: Prisma.ProductoServicioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductoServicioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductoServicioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoServicioPayload>
          }
          aggregate: {
            args: Prisma.ProductoServicioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductoServicio>
          }
          groupBy: {
            args: Prisma.ProductoServicioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductoServicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductoServicioCountArgs<ExtArgs>
            result: $Utils.Optional<ProductoServicioCountAggregateOutputType> | number
          }
        }
      }
      ProductoNegociacion: {
        payload: Prisma.$ProductoNegociacionPayload<ExtArgs>
        fields: Prisma.ProductoNegociacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductoNegociacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductoNegociacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload>
          }
          findFirst: {
            args: Prisma.ProductoNegociacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductoNegociacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload>
          }
          findMany: {
            args: Prisma.ProductoNegociacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload>[]
          }
          create: {
            args: Prisma.ProductoNegociacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload>
          }
          createMany: {
            args: Prisma.ProductoNegociacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductoNegociacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload>
          }
          update: {
            args: Prisma.ProductoNegociacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload>
          }
          deleteMany: {
            args: Prisma.ProductoNegociacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductoNegociacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductoNegociacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductoNegociacionPayload>
          }
          aggregate: {
            args: Prisma.ProductoNegociacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductoNegociacion>
          }
          groupBy: {
            args: Prisma.ProductoNegociacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductoNegociacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductoNegociacionCountArgs<ExtArgs>
            result: $Utils.Optional<ProductoNegociacionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    empresa?: EmpresaOmit
    cliente?: ClienteOmit
    usuario?: UsuarioOmit
    negociacion?: NegociacionOmit
    estado?: EstadoOmit
    productoServicio?: ProductoServicioOmit
    productoNegociacion?: ProductoNegociacionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmpresaCountOutputType
   */

  export type EmpresaCountOutputType = {
    clientes: number
  }

  export type EmpresaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | EmpresaCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmpresaCountOutputType
     */
    select?: EmpresaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
  }


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    negociaciones: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negociaciones?: boolean | ClienteCountOutputTypeCountNegociacionesArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountNegociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NegociacionWhereInput
  }


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    negociaciones: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negociaciones?: boolean | UsuarioCountOutputTypeCountNegociacionesArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountNegociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NegociacionWhereInput
  }


  /**
   * Count Type NegociacionCountOutputType
   */

  export type NegociacionCountOutputType = {
    productos: number
  }

  export type NegociacionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productos?: boolean | NegociacionCountOutputTypeCountProductosArgs
  }

  // Custom InputTypes
  /**
   * NegociacionCountOutputType without action
   */
  export type NegociacionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NegociacionCountOutputType
     */
    select?: NegociacionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NegociacionCountOutputType without action
   */
  export type NegociacionCountOutputTypeCountProductosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductoNegociacionWhereInput
  }


  /**
   * Count Type EstadoCountOutputType
   */

  export type EstadoCountOutputType = {
    negociaciones: number
  }

  export type EstadoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negociaciones?: boolean | EstadoCountOutputTypeCountNegociacionesArgs
  }

  // Custom InputTypes
  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCountOutputType
     */
    select?: EstadoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeCountNegociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NegociacionWhereInput
  }


  /**
   * Count Type ProductoServicioCountOutputType
   */

  export type ProductoServicioCountOutputType = {
    negociaciones: number
  }

  export type ProductoServicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negociaciones?: boolean | ProductoServicioCountOutputTypeCountNegociacionesArgs
  }

  // Custom InputTypes
  /**
   * ProductoServicioCountOutputType without action
   */
  export type ProductoServicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicioCountOutputType
     */
    select?: ProductoServicioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductoServicioCountOutputType without action
   */
  export type ProductoServicioCountOutputTypeCountNegociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductoNegociacionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Empresa
   */

  export type AggregateEmpresa = {
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  export type EmpresaAvgAggregateOutputType = {
    id: number | null
  }

  export type EmpresaSumAggregateOutputType = {
    id: number | null
  }

  export type EmpresaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    industria: string | null
    preferencias: string | null
  }

  export type EmpresaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    industria: string | null
    preferencias: string | null
  }

  export type EmpresaCountAggregateOutputType = {
    id: number
    nombre: number
    industria: number
    preferencias: number
    _all: number
  }


  export type EmpresaAvgAggregateInputType = {
    id?: true
  }

  export type EmpresaSumAggregateInputType = {
    id?: true
  }

  export type EmpresaMinAggregateInputType = {
    id?: true
    nombre?: true
    industria?: true
    preferencias?: true
  }

  export type EmpresaMaxAggregateInputType = {
    id?: true
    nombre?: true
    industria?: true
    preferencias?: true
  }

  export type EmpresaCountAggregateInputType = {
    id?: true
    nombre?: true
    industria?: true
    preferencias?: true
    _all?: true
  }

  export type EmpresaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresa to aggregate.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Empresas
    **/
    _count?: true | EmpresaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmpresaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmpresaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresaMaxAggregateInputType
  }

  export type GetEmpresaAggregateType<T extends EmpresaAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresa[P]>
      : GetScalarType<T[P], AggregateEmpresa[P]>
  }




  export type EmpresaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmpresaWhereInput
    orderBy?: EmpresaOrderByWithAggregationInput | EmpresaOrderByWithAggregationInput[]
    by: EmpresaScalarFieldEnum[] | EmpresaScalarFieldEnum
    having?: EmpresaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresaCountAggregateInputType | true
    _avg?: EmpresaAvgAggregateInputType
    _sum?: EmpresaSumAggregateInputType
    _min?: EmpresaMinAggregateInputType
    _max?: EmpresaMaxAggregateInputType
  }

  export type EmpresaGroupByOutputType = {
    id: number
    nombre: string
    industria: string
    preferencias: string
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  type GetEmpresaGroupByPayload<T extends EmpresaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmpresaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
        }
      >
    >


  export type EmpresaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    industria?: boolean
    preferencias?: boolean
    clientes?: boolean | Empresa$clientesArgs<ExtArgs>
    _count?: boolean | EmpresaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["empresa"]>



  export type EmpresaSelectScalar = {
    id?: boolean
    nombre?: boolean
    industria?: boolean
    preferencias?: boolean
  }

  export type EmpresaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "industria" | "preferencias", ExtArgs["result"]["empresa"]>
  export type EmpresaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | Empresa$clientesArgs<ExtArgs>
    _count?: boolean | EmpresaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmpresaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Empresa"
    objects: {
      clientes: Prisma.$ClientePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      industria: string
      preferencias: string
    }, ExtArgs["result"]["empresa"]>
    composites: {}
  }

  type EmpresaGetPayload<S extends boolean | null | undefined | EmpresaDefaultArgs> = $Result.GetResult<Prisma.$EmpresaPayload, S>

  type EmpresaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmpresaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmpresaCountAggregateInputType | true
    }

  export interface EmpresaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Empresa'], meta: { name: 'Empresa' } }
    /**
     * Find zero or one Empresa that matches the filter.
     * @param {EmpresaFindUniqueArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmpresaFindUniqueArgs>(args: SelectSubset<T, EmpresaFindUniqueArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Empresa that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmpresaFindUniqueOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmpresaFindUniqueOrThrowArgs>(args: SelectSubset<T, EmpresaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Empresa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmpresaFindFirstArgs>(args?: SelectSubset<T, EmpresaFindFirstArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Empresa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmpresaFindFirstOrThrowArgs>(args?: SelectSubset<T, EmpresaFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empresas
     * const empresas = await prisma.empresa.findMany()
     * 
     * // Get first 10 Empresas
     * const empresas = await prisma.empresa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empresaWithIdOnly = await prisma.empresa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmpresaFindManyArgs>(args?: SelectSubset<T, EmpresaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Empresa.
     * @param {EmpresaCreateArgs} args - Arguments to create a Empresa.
     * @example
     * // Create one Empresa
     * const Empresa = await prisma.empresa.create({
     *   data: {
     *     // ... data to create a Empresa
     *   }
     * })
     * 
     */
    create<T extends EmpresaCreateArgs>(args: SelectSubset<T, EmpresaCreateArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Empresas.
     * @param {EmpresaCreateManyArgs} args - Arguments to create many Empresas.
     * @example
     * // Create many Empresas
     * const empresa = await prisma.empresa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmpresaCreateManyArgs>(args?: SelectSubset<T, EmpresaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Empresa.
     * @param {EmpresaDeleteArgs} args - Arguments to delete one Empresa.
     * @example
     * // Delete one Empresa
     * const Empresa = await prisma.empresa.delete({
     *   where: {
     *     // ... filter to delete one Empresa
     *   }
     * })
     * 
     */
    delete<T extends EmpresaDeleteArgs>(args: SelectSubset<T, EmpresaDeleteArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Empresa.
     * @param {EmpresaUpdateArgs} args - Arguments to update one Empresa.
     * @example
     * // Update one Empresa
     * const empresa = await prisma.empresa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmpresaUpdateArgs>(args: SelectSubset<T, EmpresaUpdateArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Empresas.
     * @param {EmpresaDeleteManyArgs} args - Arguments to filter Empresas to delete.
     * @example
     * // Delete a few Empresas
     * const { count } = await prisma.empresa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmpresaDeleteManyArgs>(args?: SelectSubset<T, EmpresaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empresas
     * const empresa = await prisma.empresa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmpresaUpdateManyArgs>(args: SelectSubset<T, EmpresaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Empresa.
     * @param {EmpresaUpsertArgs} args - Arguments to update or create a Empresa.
     * @example
     * // Update or create a Empresa
     * const empresa = await prisma.empresa.upsert({
     *   create: {
     *     // ... data to create a Empresa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empresa we want to update
     *   }
     * })
     */
    upsert<T extends EmpresaUpsertArgs>(args: SelectSubset<T, EmpresaUpsertArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaCountArgs} args - Arguments to filter Empresas to count.
     * @example
     * // Count the number of Empresas
     * const count = await prisma.empresa.count({
     *   where: {
     *     // ... the filter for the Empresas we want to count
     *   }
     * })
    **/
    count<T extends EmpresaCountArgs>(
      args?: Subset<T, EmpresaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresaAggregateArgs>(args: Subset<T, EmpresaAggregateArgs>): Prisma.PrismaPromise<GetEmpresaAggregateType<T>>

    /**
     * Group by Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmpresaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmpresaGroupByArgs['orderBy'] }
        : { orderBy?: EmpresaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmpresaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Empresa model
   */
  readonly fields: EmpresaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Empresa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmpresaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientes<T extends Empresa$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Empresa$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Empresa model
   */ 
  interface EmpresaFieldRefs {
    readonly id: FieldRef<"Empresa", 'Int'>
    readonly nombre: FieldRef<"Empresa", 'String'>
    readonly industria: FieldRef<"Empresa", 'String'>
    readonly preferencias: FieldRef<"Empresa", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Empresa findUnique
   */
  export type EmpresaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findUniqueOrThrow
   */
  export type EmpresaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa findFirst
   */
  export type EmpresaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findFirstOrThrow
   */
  export type EmpresaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresa to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     */
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa findMany
   */
  export type EmpresaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter, which Empresas to fetch.
     */
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     */
    orderBy?: EmpresaOrderByWithRelationInput | EmpresaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Empresas.
     */
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     */
    skip?: number
    distinct?: EmpresaScalarFieldEnum | EmpresaScalarFieldEnum[]
  }

  /**
   * Empresa create
   */
  export type EmpresaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The data needed to create a Empresa.
     */
    data: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
  }

  /**
   * Empresa createMany
   */
  export type EmpresaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Empresas.
     */
    data: EmpresaCreateManyInput | EmpresaCreateManyInput[]
  }

  /**
   * Empresa update
   */
  export type EmpresaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The data needed to update a Empresa.
     */
    data: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
    /**
     * Choose, which Empresa to update.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa updateMany
   */
  export type EmpresaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Empresas.
     */
    data: XOR<EmpresaUpdateManyMutationInput, EmpresaUncheckedUpdateManyInput>
    /**
     * Filter which Empresas to update
     */
    where?: EmpresaWhereInput
    /**
     * Limit how many Empresas to update.
     */
    limit?: number
  }

  /**
   * Empresa upsert
   */
  export type EmpresaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * The filter to search for the Empresa to update in case it exists.
     */
    where: EmpresaWhereUniqueInput
    /**
     * In case the Empresa found by the `where` argument doesn't exist, create a new Empresa with this data.
     */
    create: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
    /**
     * In case the Empresa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
  }

  /**
   * Empresa delete
   */
  export type EmpresaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
    /**
     * Filter which Empresa to delete.
     */
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa deleteMany
   */
  export type EmpresaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Empresas to delete
     */
    where?: EmpresaWhereInput
    /**
     * Limit how many Empresas to delete.
     */
    limit?: number
  }

  /**
   * Empresa.clientes
   */
  export type Empresa$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    cursor?: ClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Empresa without action
   */
  export type EmpresaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Empresa
     */
    select?: EmpresaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Empresa
     */
    omit?: EmpresaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmpresaInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
    idEmpresa: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
    idEmpresa: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    correo: string | null
    nombre: string | null
    idEmpresa: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    correo: string | null
    nombre: string | null
    idEmpresa: number | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    correo: number
    nombre: number
    idEmpresa: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
    idEmpresa?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
    idEmpresa?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    correo?: true
    nombre?: true
    idEmpresa?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    correo?: true
    nombre?: true
    idEmpresa?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    correo?: true
    nombre?: true
    idEmpresa?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    correo: string
    nombre: string
    idEmpresa: number
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    nombre?: boolean
    idEmpresa?: boolean
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    negociaciones?: boolean | Cliente$negociacionesArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>



  export type ClienteSelectScalar = {
    id?: boolean
    correo?: boolean
    nombre?: boolean
    idEmpresa?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "correo" | "nombre" | "idEmpresa", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    empresa?: boolean | EmpresaDefaultArgs<ExtArgs>
    negociaciones?: boolean | Cliente$negociacionesArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      empresa: Prisma.$EmpresaPayload<ExtArgs>
      negociaciones: Prisma.$NegociacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      correo: string
      nombre: string
      idEmpresa: number
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    empresa<T extends EmpresaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmpresaDefaultArgs<ExtArgs>>): Prisma__EmpresaClient<$Result.GetResult<Prisma.$EmpresaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    negociaciones<T extends Cliente$negociacionesArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$negociacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly correo: FieldRef<"Cliente", 'String'>
    readonly nombre: FieldRef<"Cliente", 'String'>
    readonly idEmpresa: FieldRef<"Cliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.negociaciones
   */
  export type Cliente$negociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    where?: NegociacionWhereInput
    orderBy?: NegociacionOrderByWithRelationInput | NegociacionOrderByWithRelationInput[]
    cursor?: NegociacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NegociacionScalarFieldEnum | NegociacionScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    email: string | null
    contraseña: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    email: string | null
    contraseña: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombre: number
    email: number
    contraseña: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    contraseña?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    contraseña?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    contraseña?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nombre: string
    email: string
    contraseña: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    email?: boolean
    contraseña?: boolean
    negociaciones?: boolean | Usuario$negociacionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>



  export type UsuarioSelectScalar = {
    id?: boolean
    nombre?: boolean
    email?: boolean
    contraseña?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "email" | "contraseña", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negociaciones?: boolean | Usuario$negociacionesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      negociaciones: Prisma.$NegociacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      email: string
      contraseña: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    negociaciones<T extends Usuario$negociacionesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$negociacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly contraseña: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.negociaciones
   */
  export type Usuario$negociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    where?: NegociacionWhereInput
    orderBy?: NegociacionOrderByWithRelationInput | NegociacionOrderByWithRelationInput[]
    cursor?: NegociacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NegociacionScalarFieldEnum | NegociacionScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Negociacion
   */

  export type AggregateNegociacion = {
    _count: NegociacionCountAggregateOutputType | null
    _avg: NegociacionAvgAggregateOutputType | null
    _sum: NegociacionSumAggregateOutputType | null
    _min: NegociacionMinAggregateOutputType | null
    _max: NegociacionMaxAggregateOutputType | null
  }

  export type NegociacionAvgAggregateOutputType = {
    id: number | null
    idUsuarios: number | null
    idClientes: number | null
    idEstado: number | null
  }

  export type NegociacionSumAggregateOutputType = {
    id: number | null
    idUsuarios: number | null
    idClientes: number | null
    idEstado: number | null
  }

  export type NegociacionMinAggregateOutputType = {
    id: number | null
    idUsuarios: number | null
    idClientes: number | null
    idEstado: number | null
    fecha: Date | null
    asunto: string | null
    descripcion: string | null
  }

  export type NegociacionMaxAggregateOutputType = {
    id: number | null
    idUsuarios: number | null
    idClientes: number | null
    idEstado: number | null
    fecha: Date | null
    asunto: string | null
    descripcion: string | null
  }

  export type NegociacionCountAggregateOutputType = {
    id: number
    idUsuarios: number
    idClientes: number
    idEstado: number
    fecha: number
    asunto: number
    descripcion: number
    _all: number
  }


  export type NegociacionAvgAggregateInputType = {
    id?: true
    idUsuarios?: true
    idClientes?: true
    idEstado?: true
  }

  export type NegociacionSumAggregateInputType = {
    id?: true
    idUsuarios?: true
    idClientes?: true
    idEstado?: true
  }

  export type NegociacionMinAggregateInputType = {
    id?: true
    idUsuarios?: true
    idClientes?: true
    idEstado?: true
    fecha?: true
    asunto?: true
    descripcion?: true
  }

  export type NegociacionMaxAggregateInputType = {
    id?: true
    idUsuarios?: true
    idClientes?: true
    idEstado?: true
    fecha?: true
    asunto?: true
    descripcion?: true
  }

  export type NegociacionCountAggregateInputType = {
    id?: true
    idUsuarios?: true
    idClientes?: true
    idEstado?: true
    fecha?: true
    asunto?: true
    descripcion?: true
    _all?: true
  }

  export type NegociacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Negociacion to aggregate.
     */
    where?: NegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Negociacions to fetch.
     */
    orderBy?: NegociacionOrderByWithRelationInput | NegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Negociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Negociacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Negociacions
    **/
    _count?: true | NegociacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NegociacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NegociacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NegociacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NegociacionMaxAggregateInputType
  }

  export type GetNegociacionAggregateType<T extends NegociacionAggregateArgs> = {
        [P in keyof T & keyof AggregateNegociacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNegociacion[P]>
      : GetScalarType<T[P], AggregateNegociacion[P]>
  }




  export type NegociacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NegociacionWhereInput
    orderBy?: NegociacionOrderByWithAggregationInput | NegociacionOrderByWithAggregationInput[]
    by: NegociacionScalarFieldEnum[] | NegociacionScalarFieldEnum
    having?: NegociacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NegociacionCountAggregateInputType | true
    _avg?: NegociacionAvgAggregateInputType
    _sum?: NegociacionSumAggregateInputType
    _min?: NegociacionMinAggregateInputType
    _max?: NegociacionMaxAggregateInputType
  }

  export type NegociacionGroupByOutputType = {
    id: number
    idUsuarios: number
    idClientes: number
    idEstado: number
    fecha: Date
    asunto: string
    descripcion: string
    _count: NegociacionCountAggregateOutputType | null
    _avg: NegociacionAvgAggregateOutputType | null
    _sum: NegociacionSumAggregateOutputType | null
    _min: NegociacionMinAggregateOutputType | null
    _max: NegociacionMaxAggregateOutputType | null
  }

  type GetNegociacionGroupByPayload<T extends NegociacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NegociacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NegociacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NegociacionGroupByOutputType[P]>
            : GetScalarType<T[P], NegociacionGroupByOutputType[P]>
        }
      >
    >


  export type NegociacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idUsuarios?: boolean
    idClientes?: boolean
    idEstado?: boolean
    fecha?: boolean
    asunto?: boolean
    descripcion?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    productos?: boolean | Negociacion$productosArgs<ExtArgs>
    _count?: boolean | NegociacionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["negociacion"]>



  export type NegociacionSelectScalar = {
    id?: boolean
    idUsuarios?: boolean
    idClientes?: boolean
    idEstado?: boolean
    fecha?: boolean
    asunto?: boolean
    descripcion?: boolean
  }

  export type NegociacionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "idUsuarios" | "idClientes" | "idEstado" | "fecha" | "asunto" | "descripcion", ExtArgs["result"]["negociacion"]>
  export type NegociacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    productos?: boolean | Negociacion$productosArgs<ExtArgs>
    _count?: boolean | NegociacionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NegociacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Negociacion"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      cliente: Prisma.$ClientePayload<ExtArgs>
      estado: Prisma.$EstadoPayload<ExtArgs>
      productos: Prisma.$ProductoNegociacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idUsuarios: number
      idClientes: number
      idEstado: number
      fecha: Date
      asunto: string
      descripcion: string
    }, ExtArgs["result"]["negociacion"]>
    composites: {}
  }

  type NegociacionGetPayload<S extends boolean | null | undefined | NegociacionDefaultArgs> = $Result.GetResult<Prisma.$NegociacionPayload, S>

  type NegociacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NegociacionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NegociacionCountAggregateInputType | true
    }

  export interface NegociacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Negociacion'], meta: { name: 'Negociacion' } }
    /**
     * Find zero or one Negociacion that matches the filter.
     * @param {NegociacionFindUniqueArgs} args - Arguments to find a Negociacion
     * @example
     * // Get one Negociacion
     * const negociacion = await prisma.negociacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NegociacionFindUniqueArgs>(args: SelectSubset<T, NegociacionFindUniqueArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Negociacion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NegociacionFindUniqueOrThrowArgs} args - Arguments to find a Negociacion
     * @example
     * // Get one Negociacion
     * const negociacion = await prisma.negociacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NegociacionFindUniqueOrThrowArgs>(args: SelectSubset<T, NegociacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Negociacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegociacionFindFirstArgs} args - Arguments to find a Negociacion
     * @example
     * // Get one Negociacion
     * const negociacion = await prisma.negociacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NegociacionFindFirstArgs>(args?: SelectSubset<T, NegociacionFindFirstArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Negociacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegociacionFindFirstOrThrowArgs} args - Arguments to find a Negociacion
     * @example
     * // Get one Negociacion
     * const negociacion = await prisma.negociacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NegociacionFindFirstOrThrowArgs>(args?: SelectSubset<T, NegociacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Negociacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegociacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Negociacions
     * const negociacions = await prisma.negociacion.findMany()
     * 
     * // Get first 10 Negociacions
     * const negociacions = await prisma.negociacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const negociacionWithIdOnly = await prisma.negociacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NegociacionFindManyArgs>(args?: SelectSubset<T, NegociacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Negociacion.
     * @param {NegociacionCreateArgs} args - Arguments to create a Negociacion.
     * @example
     * // Create one Negociacion
     * const Negociacion = await prisma.negociacion.create({
     *   data: {
     *     // ... data to create a Negociacion
     *   }
     * })
     * 
     */
    create<T extends NegociacionCreateArgs>(args: SelectSubset<T, NegociacionCreateArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Negociacions.
     * @param {NegociacionCreateManyArgs} args - Arguments to create many Negociacions.
     * @example
     * // Create many Negociacions
     * const negociacion = await prisma.negociacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NegociacionCreateManyArgs>(args?: SelectSubset<T, NegociacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Negociacion.
     * @param {NegociacionDeleteArgs} args - Arguments to delete one Negociacion.
     * @example
     * // Delete one Negociacion
     * const Negociacion = await prisma.negociacion.delete({
     *   where: {
     *     // ... filter to delete one Negociacion
     *   }
     * })
     * 
     */
    delete<T extends NegociacionDeleteArgs>(args: SelectSubset<T, NegociacionDeleteArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Negociacion.
     * @param {NegociacionUpdateArgs} args - Arguments to update one Negociacion.
     * @example
     * // Update one Negociacion
     * const negociacion = await prisma.negociacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NegociacionUpdateArgs>(args: SelectSubset<T, NegociacionUpdateArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Negociacions.
     * @param {NegociacionDeleteManyArgs} args - Arguments to filter Negociacions to delete.
     * @example
     * // Delete a few Negociacions
     * const { count } = await prisma.negociacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NegociacionDeleteManyArgs>(args?: SelectSubset<T, NegociacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Negociacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegociacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Negociacions
     * const negociacion = await prisma.negociacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NegociacionUpdateManyArgs>(args: SelectSubset<T, NegociacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Negociacion.
     * @param {NegociacionUpsertArgs} args - Arguments to update or create a Negociacion.
     * @example
     * // Update or create a Negociacion
     * const negociacion = await prisma.negociacion.upsert({
     *   create: {
     *     // ... data to create a Negociacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Negociacion we want to update
     *   }
     * })
     */
    upsert<T extends NegociacionUpsertArgs>(args: SelectSubset<T, NegociacionUpsertArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Negociacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegociacionCountArgs} args - Arguments to filter Negociacions to count.
     * @example
     * // Count the number of Negociacions
     * const count = await prisma.negociacion.count({
     *   where: {
     *     // ... the filter for the Negociacions we want to count
     *   }
     * })
    **/
    count<T extends NegociacionCountArgs>(
      args?: Subset<T, NegociacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NegociacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Negociacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegociacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NegociacionAggregateArgs>(args: Subset<T, NegociacionAggregateArgs>): Prisma.PrismaPromise<GetNegociacionAggregateType<T>>

    /**
     * Group by Negociacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NegociacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NegociacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NegociacionGroupByArgs['orderBy'] }
        : { orderBy?: NegociacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NegociacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNegociacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Negociacion model
   */
  readonly fields: NegociacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Negociacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NegociacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    estado<T extends EstadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoDefaultArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    productos<T extends Negociacion$productosArgs<ExtArgs> = {}>(args?: Subset<T, Negociacion$productosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Negociacion model
   */ 
  interface NegociacionFieldRefs {
    readonly id: FieldRef<"Negociacion", 'Int'>
    readonly idUsuarios: FieldRef<"Negociacion", 'Int'>
    readonly idClientes: FieldRef<"Negociacion", 'Int'>
    readonly idEstado: FieldRef<"Negociacion", 'Int'>
    readonly fecha: FieldRef<"Negociacion", 'DateTime'>
    readonly asunto: FieldRef<"Negociacion", 'String'>
    readonly descripcion: FieldRef<"Negociacion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Negociacion findUnique
   */
  export type NegociacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * Filter, which Negociacion to fetch.
     */
    where: NegociacionWhereUniqueInput
  }

  /**
   * Negociacion findUniqueOrThrow
   */
  export type NegociacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * Filter, which Negociacion to fetch.
     */
    where: NegociacionWhereUniqueInput
  }

  /**
   * Negociacion findFirst
   */
  export type NegociacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * Filter, which Negociacion to fetch.
     */
    where?: NegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Negociacions to fetch.
     */
    orderBy?: NegociacionOrderByWithRelationInput | NegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Negociacions.
     */
    cursor?: NegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Negociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Negociacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Negociacions.
     */
    distinct?: NegociacionScalarFieldEnum | NegociacionScalarFieldEnum[]
  }

  /**
   * Negociacion findFirstOrThrow
   */
  export type NegociacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * Filter, which Negociacion to fetch.
     */
    where?: NegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Negociacions to fetch.
     */
    orderBy?: NegociacionOrderByWithRelationInput | NegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Negociacions.
     */
    cursor?: NegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Negociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Negociacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Negociacions.
     */
    distinct?: NegociacionScalarFieldEnum | NegociacionScalarFieldEnum[]
  }

  /**
   * Negociacion findMany
   */
  export type NegociacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * Filter, which Negociacions to fetch.
     */
    where?: NegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Negociacions to fetch.
     */
    orderBy?: NegociacionOrderByWithRelationInput | NegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Negociacions.
     */
    cursor?: NegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Negociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Negociacions.
     */
    skip?: number
    distinct?: NegociacionScalarFieldEnum | NegociacionScalarFieldEnum[]
  }

  /**
   * Negociacion create
   */
  export type NegociacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * The data needed to create a Negociacion.
     */
    data: XOR<NegociacionCreateInput, NegociacionUncheckedCreateInput>
  }

  /**
   * Negociacion createMany
   */
  export type NegociacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Negociacions.
     */
    data: NegociacionCreateManyInput | NegociacionCreateManyInput[]
  }

  /**
   * Negociacion update
   */
  export type NegociacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * The data needed to update a Negociacion.
     */
    data: XOR<NegociacionUpdateInput, NegociacionUncheckedUpdateInput>
    /**
     * Choose, which Negociacion to update.
     */
    where: NegociacionWhereUniqueInput
  }

  /**
   * Negociacion updateMany
   */
  export type NegociacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Negociacions.
     */
    data: XOR<NegociacionUpdateManyMutationInput, NegociacionUncheckedUpdateManyInput>
    /**
     * Filter which Negociacions to update
     */
    where?: NegociacionWhereInput
    /**
     * Limit how many Negociacions to update.
     */
    limit?: number
  }

  /**
   * Negociacion upsert
   */
  export type NegociacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * The filter to search for the Negociacion to update in case it exists.
     */
    where: NegociacionWhereUniqueInput
    /**
     * In case the Negociacion found by the `where` argument doesn't exist, create a new Negociacion with this data.
     */
    create: XOR<NegociacionCreateInput, NegociacionUncheckedCreateInput>
    /**
     * In case the Negociacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NegociacionUpdateInput, NegociacionUncheckedUpdateInput>
  }

  /**
   * Negociacion delete
   */
  export type NegociacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    /**
     * Filter which Negociacion to delete.
     */
    where: NegociacionWhereUniqueInput
  }

  /**
   * Negociacion deleteMany
   */
  export type NegociacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Negociacions to delete
     */
    where?: NegociacionWhereInput
    /**
     * Limit how many Negociacions to delete.
     */
    limit?: number
  }

  /**
   * Negociacion.productos
   */
  export type Negociacion$productosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    where?: ProductoNegociacionWhereInput
    orderBy?: ProductoNegociacionOrderByWithRelationInput | ProductoNegociacionOrderByWithRelationInput[]
    cursor?: ProductoNegociacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductoNegociacionScalarFieldEnum | ProductoNegociacionScalarFieldEnum[]
  }

  /**
   * Negociacion without action
   */
  export type NegociacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
  }


  /**
   * Model Estado
   */

  export type AggregateEstado = {
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  export type EstadoAvgAggregateOutputType = {
    id: number | null
  }

  export type EstadoSumAggregateOutputType = {
    id: number | null
  }

  export type EstadoMinAggregateOutputType = {
    id: number | null
    estado: string | null
  }

  export type EstadoMaxAggregateOutputType = {
    id: number | null
    estado: string | null
  }

  export type EstadoCountAggregateOutputType = {
    id: number
    estado: number
    _all: number
  }


  export type EstadoAvgAggregateInputType = {
    id?: true
  }

  export type EstadoSumAggregateInputType = {
    id?: true
  }

  export type EstadoMinAggregateInputType = {
    id?: true
    estado?: true
  }

  export type EstadoMaxAggregateInputType = {
    id?: true
    estado?: true
  }

  export type EstadoCountAggregateInputType = {
    id?: true
    estado?: true
    _all?: true
  }

  export type EstadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estado to aggregate.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estados
    **/
    _count?: true | EstadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoMaxAggregateInputType
  }

  export type GetEstadoAggregateType<T extends EstadoAggregateArgs> = {
        [P in keyof T & keyof AggregateEstado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstado[P]>
      : GetScalarType<T[P], AggregateEstado[P]>
  }




  export type EstadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstadoWhereInput
    orderBy?: EstadoOrderByWithAggregationInput | EstadoOrderByWithAggregationInput[]
    by: EstadoScalarFieldEnum[] | EstadoScalarFieldEnum
    having?: EstadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoCountAggregateInputType | true
    _avg?: EstadoAvgAggregateInputType
    _sum?: EstadoSumAggregateInputType
    _min?: EstadoMinAggregateInputType
    _max?: EstadoMaxAggregateInputType
  }

  export type EstadoGroupByOutputType = {
    id: number
    estado: string
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  type GetEstadoGroupByPayload<T extends EstadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoGroupByOutputType[P]>
        }
      >
    >


  export type EstadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estado?: boolean
    negociaciones?: boolean | Estado$negociacionesArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estado"]>



  export type EstadoSelectScalar = {
    id?: boolean
    estado?: boolean
  }

  export type EstadoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "estado", ExtArgs["result"]["estado"]>
  export type EstadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negociaciones?: boolean | Estado$negociacionesArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EstadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Estado"
    objects: {
      negociaciones: Prisma.$NegociacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      estado: string
    }, ExtArgs["result"]["estado"]>
    composites: {}
  }

  type EstadoGetPayload<S extends boolean | null | undefined | EstadoDefaultArgs> = $Result.GetResult<Prisma.$EstadoPayload, S>

  type EstadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EstadoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EstadoCountAggregateInputType | true
    }

  export interface EstadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estado'], meta: { name: 'Estado' } }
    /**
     * Find zero or one Estado that matches the filter.
     * @param {EstadoFindUniqueArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EstadoFindUniqueArgs>(args: SelectSubset<T, EstadoFindUniqueArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Estado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EstadoFindUniqueOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EstadoFindUniqueOrThrowArgs>(args: SelectSubset<T, EstadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EstadoFindFirstArgs>(args?: SelectSubset<T, EstadoFindFirstArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EstadoFindFirstOrThrowArgs>(args?: SelectSubset<T, EstadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Estados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estados
     * const estados = await prisma.estado.findMany()
     * 
     * // Get first 10 Estados
     * const estados = await prisma.estado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estadoWithIdOnly = await prisma.estado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EstadoFindManyArgs>(args?: SelectSubset<T, EstadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Estado.
     * @param {EstadoCreateArgs} args - Arguments to create a Estado.
     * @example
     * // Create one Estado
     * const Estado = await prisma.estado.create({
     *   data: {
     *     // ... data to create a Estado
     *   }
     * })
     * 
     */
    create<T extends EstadoCreateArgs>(args: SelectSubset<T, EstadoCreateArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Estados.
     * @param {EstadoCreateManyArgs} args - Arguments to create many Estados.
     * @example
     * // Create many Estados
     * const estado = await prisma.estado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EstadoCreateManyArgs>(args?: SelectSubset<T, EstadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Estado.
     * @param {EstadoDeleteArgs} args - Arguments to delete one Estado.
     * @example
     * // Delete one Estado
     * const Estado = await prisma.estado.delete({
     *   where: {
     *     // ... filter to delete one Estado
     *   }
     * })
     * 
     */
    delete<T extends EstadoDeleteArgs>(args: SelectSubset<T, EstadoDeleteArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Estado.
     * @param {EstadoUpdateArgs} args - Arguments to update one Estado.
     * @example
     * // Update one Estado
     * const estado = await prisma.estado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EstadoUpdateArgs>(args: SelectSubset<T, EstadoUpdateArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Estados.
     * @param {EstadoDeleteManyArgs} args - Arguments to filter Estados to delete.
     * @example
     * // Delete a few Estados
     * const { count } = await prisma.estado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EstadoDeleteManyArgs>(args?: SelectSubset<T, EstadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estados
     * const estado = await prisma.estado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EstadoUpdateManyArgs>(args: SelectSubset<T, EstadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estado.
     * @param {EstadoUpsertArgs} args - Arguments to update or create a Estado.
     * @example
     * // Update or create a Estado
     * const estado = await prisma.estado.upsert({
     *   create: {
     *     // ... data to create a Estado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estado we want to update
     *   }
     * })
     */
    upsert<T extends EstadoUpsertArgs>(args: SelectSubset<T, EstadoUpsertArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCountArgs} args - Arguments to filter Estados to count.
     * @example
     * // Count the number of Estados
     * const count = await prisma.estado.count({
     *   where: {
     *     // ... the filter for the Estados we want to count
     *   }
     * })
    **/
    count<T extends EstadoCountArgs>(
      args?: Subset<T, EstadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoAggregateArgs>(args: Subset<T, EstadoAggregateArgs>): Prisma.PrismaPromise<GetEstadoAggregateType<T>>

    /**
     * Group by Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoGroupByArgs['orderBy'] }
        : { orderBy?: EstadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estado model
   */
  readonly fields: EstadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    negociaciones<T extends Estado$negociacionesArgs<ExtArgs> = {}>(args?: Subset<T, Estado$negociacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Estado model
   */ 
  interface EstadoFieldRefs {
    readonly id: FieldRef<"Estado", 'Int'>
    readonly estado: FieldRef<"Estado", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Estado findUnique
   */
  export type EstadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado findUniqueOrThrow
   */
  export type EstadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado findFirst
   */
  export type EstadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado findFirstOrThrow
   */
  export type EstadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado findMany
   */
  export type EstadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estados to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado create
   */
  export type EstadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Estado.
     */
    data: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
  }

  /**
   * Estado createMany
   */
  export type EstadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estados.
     */
    data: EstadoCreateManyInput | EstadoCreateManyInput[]
  }

  /**
   * Estado update
   */
  export type EstadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Estado.
     */
    data: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
    /**
     * Choose, which Estado to update.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado updateMany
   */
  export type EstadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estados.
     */
    data: XOR<EstadoUpdateManyMutationInput, EstadoUncheckedUpdateManyInput>
    /**
     * Filter which Estados to update
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to update.
     */
    limit?: number
  }

  /**
   * Estado upsert
   */
  export type EstadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Estado to update in case it exists.
     */
    where: EstadoWhereUniqueInput
    /**
     * In case the Estado found by the `where` argument doesn't exist, create a new Estado with this data.
     */
    create: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
    /**
     * In case the Estado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
  }

  /**
   * Estado delete
   */
  export type EstadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter which Estado to delete.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado deleteMany
   */
  export type EstadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estados to delete
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to delete.
     */
    limit?: number
  }

  /**
   * Estado.negociaciones
   */
  export type Estado$negociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Negociacion
     */
    select?: NegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Negociacion
     */
    omit?: NegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NegociacionInclude<ExtArgs> | null
    where?: NegociacionWhereInput
    orderBy?: NegociacionOrderByWithRelationInput | NegociacionOrderByWithRelationInput[]
    cursor?: NegociacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NegociacionScalarFieldEnum | NegociacionScalarFieldEnum[]
  }

  /**
   * Estado without action
   */
  export type EstadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
  }


  /**
   * Model ProductoServicio
   */

  export type AggregateProductoServicio = {
    _count: ProductoServicioCountAggregateOutputType | null
    _avg: ProductoServicioAvgAggregateOutputType | null
    _sum: ProductoServicioSumAggregateOutputType | null
    _min: ProductoServicioMinAggregateOutputType | null
    _max: ProductoServicioMaxAggregateOutputType | null
  }

  export type ProductoServicioAvgAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ProductoServicioSumAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ProductoServicioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
  }

  export type ProductoServicioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    precio: number | null
  }

  export type ProductoServicioCountAggregateOutputType = {
    id: number
    nombre: number
    precio: number
    _all: number
  }


  export type ProductoServicioAvgAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ProductoServicioSumAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ProductoServicioMinAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
  }

  export type ProductoServicioMaxAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
  }

  export type ProductoServicioCountAggregateInputType = {
    id?: true
    nombre?: true
    precio?: true
    _all?: true
  }

  export type ProductoServicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductoServicio to aggregate.
     */
    where?: ProductoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoServicios to fetch.
     */
    orderBy?: ProductoServicioOrderByWithRelationInput | ProductoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductoServicios
    **/
    _count?: true | ProductoServicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoServicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoServicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoServicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoServicioMaxAggregateInputType
  }

  export type GetProductoServicioAggregateType<T extends ProductoServicioAggregateArgs> = {
        [P in keyof T & keyof AggregateProductoServicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductoServicio[P]>
      : GetScalarType<T[P], AggregateProductoServicio[P]>
  }




  export type ProductoServicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductoServicioWhereInput
    orderBy?: ProductoServicioOrderByWithAggregationInput | ProductoServicioOrderByWithAggregationInput[]
    by: ProductoServicioScalarFieldEnum[] | ProductoServicioScalarFieldEnum
    having?: ProductoServicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoServicioCountAggregateInputType | true
    _avg?: ProductoServicioAvgAggregateInputType
    _sum?: ProductoServicioSumAggregateInputType
    _min?: ProductoServicioMinAggregateInputType
    _max?: ProductoServicioMaxAggregateInputType
  }

  export type ProductoServicioGroupByOutputType = {
    id: number
    nombre: string
    precio: number
    _count: ProductoServicioCountAggregateOutputType | null
    _avg: ProductoServicioAvgAggregateOutputType | null
    _sum: ProductoServicioSumAggregateOutputType | null
    _min: ProductoServicioMinAggregateOutputType | null
    _max: ProductoServicioMaxAggregateOutputType | null
  }

  type GetProductoServicioGroupByPayload<T extends ProductoServicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductoServicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoServicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoServicioGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoServicioGroupByOutputType[P]>
        }
      >
    >


  export type ProductoServicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    precio?: boolean
    negociaciones?: boolean | ProductoServicio$negociacionesArgs<ExtArgs>
    _count?: boolean | ProductoServicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productoServicio"]>



  export type ProductoServicioSelectScalar = {
    id?: boolean
    nombre?: boolean
    precio?: boolean
  }

  export type ProductoServicioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "precio", ExtArgs["result"]["productoServicio"]>
  export type ProductoServicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    negociaciones?: boolean | ProductoServicio$negociacionesArgs<ExtArgs>
    _count?: boolean | ProductoServicioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductoServicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductoServicio"
    objects: {
      negociaciones: Prisma.$ProductoNegociacionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      precio: number
    }, ExtArgs["result"]["productoServicio"]>
    composites: {}
  }

  type ProductoServicioGetPayload<S extends boolean | null | undefined | ProductoServicioDefaultArgs> = $Result.GetResult<Prisma.$ProductoServicioPayload, S>

  type ProductoServicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductoServicioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductoServicioCountAggregateInputType | true
    }

  export interface ProductoServicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductoServicio'], meta: { name: 'ProductoServicio' } }
    /**
     * Find zero or one ProductoServicio that matches the filter.
     * @param {ProductoServicioFindUniqueArgs} args - Arguments to find a ProductoServicio
     * @example
     * // Get one ProductoServicio
     * const productoServicio = await prisma.productoServicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductoServicioFindUniqueArgs>(args: SelectSubset<T, ProductoServicioFindUniqueArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductoServicio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductoServicioFindUniqueOrThrowArgs} args - Arguments to find a ProductoServicio
     * @example
     * // Get one ProductoServicio
     * const productoServicio = await prisma.productoServicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductoServicioFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductoServicioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductoServicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoServicioFindFirstArgs} args - Arguments to find a ProductoServicio
     * @example
     * // Get one ProductoServicio
     * const productoServicio = await prisma.productoServicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductoServicioFindFirstArgs>(args?: SelectSubset<T, ProductoServicioFindFirstArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductoServicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoServicioFindFirstOrThrowArgs} args - Arguments to find a ProductoServicio
     * @example
     * // Get one ProductoServicio
     * const productoServicio = await prisma.productoServicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductoServicioFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductoServicioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductoServicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoServicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductoServicios
     * const productoServicios = await prisma.productoServicio.findMany()
     * 
     * // Get first 10 ProductoServicios
     * const productoServicios = await prisma.productoServicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productoServicioWithIdOnly = await prisma.productoServicio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductoServicioFindManyArgs>(args?: SelectSubset<T, ProductoServicioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductoServicio.
     * @param {ProductoServicioCreateArgs} args - Arguments to create a ProductoServicio.
     * @example
     * // Create one ProductoServicio
     * const ProductoServicio = await prisma.productoServicio.create({
     *   data: {
     *     // ... data to create a ProductoServicio
     *   }
     * })
     * 
     */
    create<T extends ProductoServicioCreateArgs>(args: SelectSubset<T, ProductoServicioCreateArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductoServicios.
     * @param {ProductoServicioCreateManyArgs} args - Arguments to create many ProductoServicios.
     * @example
     * // Create many ProductoServicios
     * const productoServicio = await prisma.productoServicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductoServicioCreateManyArgs>(args?: SelectSubset<T, ProductoServicioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductoServicio.
     * @param {ProductoServicioDeleteArgs} args - Arguments to delete one ProductoServicio.
     * @example
     * // Delete one ProductoServicio
     * const ProductoServicio = await prisma.productoServicio.delete({
     *   where: {
     *     // ... filter to delete one ProductoServicio
     *   }
     * })
     * 
     */
    delete<T extends ProductoServicioDeleteArgs>(args: SelectSubset<T, ProductoServicioDeleteArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductoServicio.
     * @param {ProductoServicioUpdateArgs} args - Arguments to update one ProductoServicio.
     * @example
     * // Update one ProductoServicio
     * const productoServicio = await prisma.productoServicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductoServicioUpdateArgs>(args: SelectSubset<T, ProductoServicioUpdateArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductoServicios.
     * @param {ProductoServicioDeleteManyArgs} args - Arguments to filter ProductoServicios to delete.
     * @example
     * // Delete a few ProductoServicios
     * const { count } = await prisma.productoServicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductoServicioDeleteManyArgs>(args?: SelectSubset<T, ProductoServicioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductoServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoServicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductoServicios
     * const productoServicio = await prisma.productoServicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductoServicioUpdateManyArgs>(args: SelectSubset<T, ProductoServicioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductoServicio.
     * @param {ProductoServicioUpsertArgs} args - Arguments to update or create a ProductoServicio.
     * @example
     * // Update or create a ProductoServicio
     * const productoServicio = await prisma.productoServicio.upsert({
     *   create: {
     *     // ... data to create a ProductoServicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductoServicio we want to update
     *   }
     * })
     */
    upsert<T extends ProductoServicioUpsertArgs>(args: SelectSubset<T, ProductoServicioUpsertArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductoServicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoServicioCountArgs} args - Arguments to filter ProductoServicios to count.
     * @example
     * // Count the number of ProductoServicios
     * const count = await prisma.productoServicio.count({
     *   where: {
     *     // ... the filter for the ProductoServicios we want to count
     *   }
     * })
    **/
    count<T extends ProductoServicioCountArgs>(
      args?: Subset<T, ProductoServicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoServicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductoServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoServicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoServicioAggregateArgs>(args: Subset<T, ProductoServicioAggregateArgs>): Prisma.PrismaPromise<GetProductoServicioAggregateType<T>>

    /**
     * Group by ProductoServicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoServicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductoServicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductoServicioGroupByArgs['orderBy'] }
        : { orderBy?: ProductoServicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductoServicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoServicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductoServicio model
   */
  readonly fields: ProductoServicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductoServicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductoServicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    negociaciones<T extends ProductoServicio$negociacionesArgs<ExtArgs> = {}>(args?: Subset<T, ProductoServicio$negociacionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductoServicio model
   */ 
  interface ProductoServicioFieldRefs {
    readonly id: FieldRef<"ProductoServicio", 'Int'>
    readonly nombre: FieldRef<"ProductoServicio", 'String'>
    readonly precio: FieldRef<"ProductoServicio", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ProductoServicio findUnique
   */
  export type ProductoServicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * Filter, which ProductoServicio to fetch.
     */
    where: ProductoServicioWhereUniqueInput
  }

  /**
   * ProductoServicio findUniqueOrThrow
   */
  export type ProductoServicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * Filter, which ProductoServicio to fetch.
     */
    where: ProductoServicioWhereUniqueInput
  }

  /**
   * ProductoServicio findFirst
   */
  export type ProductoServicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * Filter, which ProductoServicio to fetch.
     */
    where?: ProductoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoServicios to fetch.
     */
    orderBy?: ProductoServicioOrderByWithRelationInput | ProductoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductoServicios.
     */
    cursor?: ProductoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductoServicios.
     */
    distinct?: ProductoServicioScalarFieldEnum | ProductoServicioScalarFieldEnum[]
  }

  /**
   * ProductoServicio findFirstOrThrow
   */
  export type ProductoServicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * Filter, which ProductoServicio to fetch.
     */
    where?: ProductoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoServicios to fetch.
     */
    orderBy?: ProductoServicioOrderByWithRelationInput | ProductoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductoServicios.
     */
    cursor?: ProductoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoServicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductoServicios.
     */
    distinct?: ProductoServicioScalarFieldEnum | ProductoServicioScalarFieldEnum[]
  }

  /**
   * ProductoServicio findMany
   */
  export type ProductoServicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * Filter, which ProductoServicios to fetch.
     */
    where?: ProductoServicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoServicios to fetch.
     */
    orderBy?: ProductoServicioOrderByWithRelationInput | ProductoServicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductoServicios.
     */
    cursor?: ProductoServicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoServicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoServicios.
     */
    skip?: number
    distinct?: ProductoServicioScalarFieldEnum | ProductoServicioScalarFieldEnum[]
  }

  /**
   * ProductoServicio create
   */
  export type ProductoServicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductoServicio.
     */
    data: XOR<ProductoServicioCreateInput, ProductoServicioUncheckedCreateInput>
  }

  /**
   * ProductoServicio createMany
   */
  export type ProductoServicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductoServicios.
     */
    data: ProductoServicioCreateManyInput | ProductoServicioCreateManyInput[]
  }

  /**
   * ProductoServicio update
   */
  export type ProductoServicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductoServicio.
     */
    data: XOR<ProductoServicioUpdateInput, ProductoServicioUncheckedUpdateInput>
    /**
     * Choose, which ProductoServicio to update.
     */
    where: ProductoServicioWhereUniqueInput
  }

  /**
   * ProductoServicio updateMany
   */
  export type ProductoServicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductoServicios.
     */
    data: XOR<ProductoServicioUpdateManyMutationInput, ProductoServicioUncheckedUpdateManyInput>
    /**
     * Filter which ProductoServicios to update
     */
    where?: ProductoServicioWhereInput
    /**
     * Limit how many ProductoServicios to update.
     */
    limit?: number
  }

  /**
   * ProductoServicio upsert
   */
  export type ProductoServicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductoServicio to update in case it exists.
     */
    where: ProductoServicioWhereUniqueInput
    /**
     * In case the ProductoServicio found by the `where` argument doesn't exist, create a new ProductoServicio with this data.
     */
    create: XOR<ProductoServicioCreateInput, ProductoServicioUncheckedCreateInput>
    /**
     * In case the ProductoServicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductoServicioUpdateInput, ProductoServicioUncheckedUpdateInput>
  }

  /**
   * ProductoServicio delete
   */
  export type ProductoServicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
    /**
     * Filter which ProductoServicio to delete.
     */
    where: ProductoServicioWhereUniqueInput
  }

  /**
   * ProductoServicio deleteMany
   */
  export type ProductoServicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductoServicios to delete
     */
    where?: ProductoServicioWhereInput
    /**
     * Limit how many ProductoServicios to delete.
     */
    limit?: number
  }

  /**
   * ProductoServicio.negociaciones
   */
  export type ProductoServicio$negociacionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    where?: ProductoNegociacionWhereInput
    orderBy?: ProductoNegociacionOrderByWithRelationInput | ProductoNegociacionOrderByWithRelationInput[]
    cursor?: ProductoNegociacionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductoNegociacionScalarFieldEnum | ProductoNegociacionScalarFieldEnum[]
  }

  /**
   * ProductoServicio without action
   */
  export type ProductoServicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoServicio
     */
    select?: ProductoServicioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoServicio
     */
    omit?: ProductoServicioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoServicioInclude<ExtArgs> | null
  }


  /**
   * Model ProductoNegociacion
   */

  export type AggregateProductoNegociacion = {
    _count: ProductoNegociacionCountAggregateOutputType | null
    _avg: ProductoNegociacionAvgAggregateOutputType | null
    _sum: ProductoNegociacionSumAggregateOutputType | null
    _min: ProductoNegociacionMinAggregateOutputType | null
    _max: ProductoNegociacionMaxAggregateOutputType | null
  }

  export type ProductoNegociacionAvgAggregateOutputType = {
    idProducto: number | null
    idNegociacion: number | null
    cantidad: number | null
  }

  export type ProductoNegociacionSumAggregateOutputType = {
    idProducto: number | null
    idNegociacion: number | null
    cantidad: number | null
  }

  export type ProductoNegociacionMinAggregateOutputType = {
    idProducto: number | null
    idNegociacion: number | null
    cantidad: number | null
  }

  export type ProductoNegociacionMaxAggregateOutputType = {
    idProducto: number | null
    idNegociacion: number | null
    cantidad: number | null
  }

  export type ProductoNegociacionCountAggregateOutputType = {
    idProducto: number
    idNegociacion: number
    cantidad: number
    _all: number
  }


  export type ProductoNegociacionAvgAggregateInputType = {
    idProducto?: true
    idNegociacion?: true
    cantidad?: true
  }

  export type ProductoNegociacionSumAggregateInputType = {
    idProducto?: true
    idNegociacion?: true
    cantidad?: true
  }

  export type ProductoNegociacionMinAggregateInputType = {
    idProducto?: true
    idNegociacion?: true
    cantidad?: true
  }

  export type ProductoNegociacionMaxAggregateInputType = {
    idProducto?: true
    idNegociacion?: true
    cantidad?: true
  }

  export type ProductoNegociacionCountAggregateInputType = {
    idProducto?: true
    idNegociacion?: true
    cantidad?: true
    _all?: true
  }

  export type ProductoNegociacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductoNegociacion to aggregate.
     */
    where?: ProductoNegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoNegociacions to fetch.
     */
    orderBy?: ProductoNegociacionOrderByWithRelationInput | ProductoNegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductoNegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoNegociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoNegociacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductoNegociacions
    **/
    _count?: true | ProductoNegociacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoNegociacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoNegociacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoNegociacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoNegociacionMaxAggregateInputType
  }

  export type GetProductoNegociacionAggregateType<T extends ProductoNegociacionAggregateArgs> = {
        [P in keyof T & keyof AggregateProductoNegociacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductoNegociacion[P]>
      : GetScalarType<T[P], AggregateProductoNegociacion[P]>
  }




  export type ProductoNegociacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductoNegociacionWhereInput
    orderBy?: ProductoNegociacionOrderByWithAggregationInput | ProductoNegociacionOrderByWithAggregationInput[]
    by: ProductoNegociacionScalarFieldEnum[] | ProductoNegociacionScalarFieldEnum
    having?: ProductoNegociacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoNegociacionCountAggregateInputType | true
    _avg?: ProductoNegociacionAvgAggregateInputType
    _sum?: ProductoNegociacionSumAggregateInputType
    _min?: ProductoNegociacionMinAggregateInputType
    _max?: ProductoNegociacionMaxAggregateInputType
  }

  export type ProductoNegociacionGroupByOutputType = {
    idProducto: number
    idNegociacion: number
    cantidad: number
    _count: ProductoNegociacionCountAggregateOutputType | null
    _avg: ProductoNegociacionAvgAggregateOutputType | null
    _sum: ProductoNegociacionSumAggregateOutputType | null
    _min: ProductoNegociacionMinAggregateOutputType | null
    _max: ProductoNegociacionMaxAggregateOutputType | null
  }

  type GetProductoNegociacionGroupByPayload<T extends ProductoNegociacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductoNegociacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoNegociacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoNegociacionGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoNegociacionGroupByOutputType[P]>
        }
      >
    >


  export type ProductoNegociacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idProducto?: boolean
    idNegociacion?: boolean
    cantidad?: boolean
    producto?: boolean | ProductoServicioDefaultArgs<ExtArgs>
    negociacion?: boolean | NegociacionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productoNegociacion"]>



  export type ProductoNegociacionSelectScalar = {
    idProducto?: boolean
    idNegociacion?: boolean
    cantidad?: boolean
  }

  export type ProductoNegociacionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idProducto" | "idNegociacion" | "cantidad", ExtArgs["result"]["productoNegociacion"]>
  export type ProductoNegociacionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producto?: boolean | ProductoServicioDefaultArgs<ExtArgs>
    negociacion?: boolean | NegociacionDefaultArgs<ExtArgs>
  }

  export type $ProductoNegociacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductoNegociacion"
    objects: {
      producto: Prisma.$ProductoServicioPayload<ExtArgs>
      negociacion: Prisma.$NegociacionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idProducto: number
      idNegociacion: number
      cantidad: number
    }, ExtArgs["result"]["productoNegociacion"]>
    composites: {}
  }

  type ProductoNegociacionGetPayload<S extends boolean | null | undefined | ProductoNegociacionDefaultArgs> = $Result.GetResult<Prisma.$ProductoNegociacionPayload, S>

  type ProductoNegociacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductoNegociacionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductoNegociacionCountAggregateInputType | true
    }

  export interface ProductoNegociacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductoNegociacion'], meta: { name: 'ProductoNegociacion' } }
    /**
     * Find zero or one ProductoNegociacion that matches the filter.
     * @param {ProductoNegociacionFindUniqueArgs} args - Arguments to find a ProductoNegociacion
     * @example
     * // Get one ProductoNegociacion
     * const productoNegociacion = await prisma.productoNegociacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductoNegociacionFindUniqueArgs>(args: SelectSubset<T, ProductoNegociacionFindUniqueArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductoNegociacion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductoNegociacionFindUniqueOrThrowArgs} args - Arguments to find a ProductoNegociacion
     * @example
     * // Get one ProductoNegociacion
     * const productoNegociacion = await prisma.productoNegociacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductoNegociacionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductoNegociacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductoNegociacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoNegociacionFindFirstArgs} args - Arguments to find a ProductoNegociacion
     * @example
     * // Get one ProductoNegociacion
     * const productoNegociacion = await prisma.productoNegociacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductoNegociacionFindFirstArgs>(args?: SelectSubset<T, ProductoNegociacionFindFirstArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductoNegociacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoNegociacionFindFirstOrThrowArgs} args - Arguments to find a ProductoNegociacion
     * @example
     * // Get one ProductoNegociacion
     * const productoNegociacion = await prisma.productoNegociacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductoNegociacionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductoNegociacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductoNegociacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoNegociacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductoNegociacions
     * const productoNegociacions = await prisma.productoNegociacion.findMany()
     * 
     * // Get first 10 ProductoNegociacions
     * const productoNegociacions = await prisma.productoNegociacion.findMany({ take: 10 })
     * 
     * // Only select the `idProducto`
     * const productoNegociacionWithIdProductoOnly = await prisma.productoNegociacion.findMany({ select: { idProducto: true } })
     * 
     */
    findMany<T extends ProductoNegociacionFindManyArgs>(args?: SelectSubset<T, ProductoNegociacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductoNegociacion.
     * @param {ProductoNegociacionCreateArgs} args - Arguments to create a ProductoNegociacion.
     * @example
     * // Create one ProductoNegociacion
     * const ProductoNegociacion = await prisma.productoNegociacion.create({
     *   data: {
     *     // ... data to create a ProductoNegociacion
     *   }
     * })
     * 
     */
    create<T extends ProductoNegociacionCreateArgs>(args: SelectSubset<T, ProductoNegociacionCreateArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductoNegociacions.
     * @param {ProductoNegociacionCreateManyArgs} args - Arguments to create many ProductoNegociacions.
     * @example
     * // Create many ProductoNegociacions
     * const productoNegociacion = await prisma.productoNegociacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductoNegociacionCreateManyArgs>(args?: SelectSubset<T, ProductoNegociacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductoNegociacion.
     * @param {ProductoNegociacionDeleteArgs} args - Arguments to delete one ProductoNegociacion.
     * @example
     * // Delete one ProductoNegociacion
     * const ProductoNegociacion = await prisma.productoNegociacion.delete({
     *   where: {
     *     // ... filter to delete one ProductoNegociacion
     *   }
     * })
     * 
     */
    delete<T extends ProductoNegociacionDeleteArgs>(args: SelectSubset<T, ProductoNegociacionDeleteArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductoNegociacion.
     * @param {ProductoNegociacionUpdateArgs} args - Arguments to update one ProductoNegociacion.
     * @example
     * // Update one ProductoNegociacion
     * const productoNegociacion = await prisma.productoNegociacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductoNegociacionUpdateArgs>(args: SelectSubset<T, ProductoNegociacionUpdateArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductoNegociacions.
     * @param {ProductoNegociacionDeleteManyArgs} args - Arguments to filter ProductoNegociacions to delete.
     * @example
     * // Delete a few ProductoNegociacions
     * const { count } = await prisma.productoNegociacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductoNegociacionDeleteManyArgs>(args?: SelectSubset<T, ProductoNegociacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductoNegociacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoNegociacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductoNegociacions
     * const productoNegociacion = await prisma.productoNegociacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductoNegociacionUpdateManyArgs>(args: SelectSubset<T, ProductoNegociacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductoNegociacion.
     * @param {ProductoNegociacionUpsertArgs} args - Arguments to update or create a ProductoNegociacion.
     * @example
     * // Update or create a ProductoNegociacion
     * const productoNegociacion = await prisma.productoNegociacion.upsert({
     *   create: {
     *     // ... data to create a ProductoNegociacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductoNegociacion we want to update
     *   }
     * })
     */
    upsert<T extends ProductoNegociacionUpsertArgs>(args: SelectSubset<T, ProductoNegociacionUpsertArgs<ExtArgs>>): Prisma__ProductoNegociacionClient<$Result.GetResult<Prisma.$ProductoNegociacionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductoNegociacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoNegociacionCountArgs} args - Arguments to filter ProductoNegociacions to count.
     * @example
     * // Count the number of ProductoNegociacions
     * const count = await prisma.productoNegociacion.count({
     *   where: {
     *     // ... the filter for the ProductoNegociacions we want to count
     *   }
     * })
    **/
    count<T extends ProductoNegociacionCountArgs>(
      args?: Subset<T, ProductoNegociacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoNegociacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductoNegociacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoNegociacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoNegociacionAggregateArgs>(args: Subset<T, ProductoNegociacionAggregateArgs>): Prisma.PrismaPromise<GetProductoNegociacionAggregateType<T>>

    /**
     * Group by ProductoNegociacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoNegociacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductoNegociacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductoNegociacionGroupByArgs['orderBy'] }
        : { orderBy?: ProductoNegociacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductoNegociacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoNegociacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductoNegociacion model
   */
  readonly fields: ProductoNegociacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductoNegociacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductoNegociacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    producto<T extends ProductoServicioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductoServicioDefaultArgs<ExtArgs>>): Prisma__ProductoServicioClient<$Result.GetResult<Prisma.$ProductoServicioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    negociacion<T extends NegociacionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NegociacionDefaultArgs<ExtArgs>>): Prisma__NegociacionClient<$Result.GetResult<Prisma.$NegociacionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductoNegociacion model
   */ 
  interface ProductoNegociacionFieldRefs {
    readonly idProducto: FieldRef<"ProductoNegociacion", 'Int'>
    readonly idNegociacion: FieldRef<"ProductoNegociacion", 'Int'>
    readonly cantidad: FieldRef<"ProductoNegociacion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductoNegociacion findUnique
   */
  export type ProductoNegociacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * Filter, which ProductoNegociacion to fetch.
     */
    where: ProductoNegociacionWhereUniqueInput
  }

  /**
   * ProductoNegociacion findUniqueOrThrow
   */
  export type ProductoNegociacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * Filter, which ProductoNegociacion to fetch.
     */
    where: ProductoNegociacionWhereUniqueInput
  }

  /**
   * ProductoNegociacion findFirst
   */
  export type ProductoNegociacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * Filter, which ProductoNegociacion to fetch.
     */
    where?: ProductoNegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoNegociacions to fetch.
     */
    orderBy?: ProductoNegociacionOrderByWithRelationInput | ProductoNegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductoNegociacions.
     */
    cursor?: ProductoNegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoNegociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoNegociacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductoNegociacions.
     */
    distinct?: ProductoNegociacionScalarFieldEnum | ProductoNegociacionScalarFieldEnum[]
  }

  /**
   * ProductoNegociacion findFirstOrThrow
   */
  export type ProductoNegociacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * Filter, which ProductoNegociacion to fetch.
     */
    where?: ProductoNegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoNegociacions to fetch.
     */
    orderBy?: ProductoNegociacionOrderByWithRelationInput | ProductoNegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductoNegociacions.
     */
    cursor?: ProductoNegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoNegociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoNegociacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductoNegociacions.
     */
    distinct?: ProductoNegociacionScalarFieldEnum | ProductoNegociacionScalarFieldEnum[]
  }

  /**
   * ProductoNegociacion findMany
   */
  export type ProductoNegociacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * Filter, which ProductoNegociacions to fetch.
     */
    where?: ProductoNegociacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductoNegociacions to fetch.
     */
    orderBy?: ProductoNegociacionOrderByWithRelationInput | ProductoNegociacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductoNegociacions.
     */
    cursor?: ProductoNegociacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductoNegociacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductoNegociacions.
     */
    skip?: number
    distinct?: ProductoNegociacionScalarFieldEnum | ProductoNegociacionScalarFieldEnum[]
  }

  /**
   * ProductoNegociacion create
   */
  export type ProductoNegociacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductoNegociacion.
     */
    data: XOR<ProductoNegociacionCreateInput, ProductoNegociacionUncheckedCreateInput>
  }

  /**
   * ProductoNegociacion createMany
   */
  export type ProductoNegociacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductoNegociacions.
     */
    data: ProductoNegociacionCreateManyInput | ProductoNegociacionCreateManyInput[]
  }

  /**
   * ProductoNegociacion update
   */
  export type ProductoNegociacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductoNegociacion.
     */
    data: XOR<ProductoNegociacionUpdateInput, ProductoNegociacionUncheckedUpdateInput>
    /**
     * Choose, which ProductoNegociacion to update.
     */
    where: ProductoNegociacionWhereUniqueInput
  }

  /**
   * ProductoNegociacion updateMany
   */
  export type ProductoNegociacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductoNegociacions.
     */
    data: XOR<ProductoNegociacionUpdateManyMutationInput, ProductoNegociacionUncheckedUpdateManyInput>
    /**
     * Filter which ProductoNegociacions to update
     */
    where?: ProductoNegociacionWhereInput
    /**
     * Limit how many ProductoNegociacions to update.
     */
    limit?: number
  }

  /**
   * ProductoNegociacion upsert
   */
  export type ProductoNegociacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductoNegociacion to update in case it exists.
     */
    where: ProductoNegociacionWhereUniqueInput
    /**
     * In case the ProductoNegociacion found by the `where` argument doesn't exist, create a new ProductoNegociacion with this data.
     */
    create: XOR<ProductoNegociacionCreateInput, ProductoNegociacionUncheckedCreateInput>
    /**
     * In case the ProductoNegociacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductoNegociacionUpdateInput, ProductoNegociacionUncheckedUpdateInput>
  }

  /**
   * ProductoNegociacion delete
   */
  export type ProductoNegociacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
    /**
     * Filter which ProductoNegociacion to delete.
     */
    where: ProductoNegociacionWhereUniqueInput
  }

  /**
   * ProductoNegociacion deleteMany
   */
  export type ProductoNegociacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductoNegociacions to delete
     */
    where?: ProductoNegociacionWhereInput
    /**
     * Limit how many ProductoNegociacions to delete.
     */
    limit?: number
  }

  /**
   * ProductoNegociacion without action
   */
  export type ProductoNegociacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductoNegociacion
     */
    select?: ProductoNegociacionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductoNegociacion
     */
    omit?: ProductoNegociacionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductoNegociacionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmpresaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    industria: 'industria',
    preferencias: 'preferencias'
  };

  export type EmpresaScalarFieldEnum = (typeof EmpresaScalarFieldEnum)[keyof typeof EmpresaScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    correo: 'correo',
    nombre: 'nombre',
    idEmpresa: 'idEmpresa'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    email: 'email',
    contraseña: 'contraseña'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const NegociacionScalarFieldEnum: {
    id: 'id',
    idUsuarios: 'idUsuarios',
    idClientes: 'idClientes',
    idEstado: 'idEstado',
    fecha: 'fecha',
    asunto: 'asunto',
    descripcion: 'descripcion'
  };

  export type NegociacionScalarFieldEnum = (typeof NegociacionScalarFieldEnum)[keyof typeof NegociacionScalarFieldEnum]


  export const EstadoScalarFieldEnum: {
    id: 'id',
    estado: 'estado'
  };

  export type EstadoScalarFieldEnum = (typeof EstadoScalarFieldEnum)[keyof typeof EstadoScalarFieldEnum]


  export const ProductoServicioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    precio: 'precio'
  };

  export type ProductoServicioScalarFieldEnum = (typeof ProductoServicioScalarFieldEnum)[keyof typeof ProductoServicioScalarFieldEnum]


  export const ProductoNegociacionScalarFieldEnum: {
    idProducto: 'idProducto',
    idNegociacion: 'idNegociacion',
    cantidad: 'cantidad'
  };

  export type ProductoNegociacionScalarFieldEnum = (typeof ProductoNegociacionScalarFieldEnum)[keyof typeof ProductoNegociacionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type EmpresaWhereInput = {
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    id?: IntFilter<"Empresa"> | number
    nombre?: StringFilter<"Empresa"> | string
    industria?: StringFilter<"Empresa"> | string
    preferencias?: StringFilter<"Empresa"> | string
    clientes?: ClienteListRelationFilter
  }

  export type EmpresaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    industria?: SortOrder
    preferencias?: SortOrder
    clientes?: ClienteOrderByRelationAggregateInput
  }

  export type EmpresaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmpresaWhereInput | EmpresaWhereInput[]
    OR?: EmpresaWhereInput[]
    NOT?: EmpresaWhereInput | EmpresaWhereInput[]
    nombre?: StringFilter<"Empresa"> | string
    industria?: StringFilter<"Empresa"> | string
    preferencias?: StringFilter<"Empresa"> | string
    clientes?: ClienteListRelationFilter
  }, "id">

  export type EmpresaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    industria?: SortOrder
    preferencias?: SortOrder
    _count?: EmpresaCountOrderByAggregateInput
    _avg?: EmpresaAvgOrderByAggregateInput
    _max?: EmpresaMaxOrderByAggregateInput
    _min?: EmpresaMinOrderByAggregateInput
    _sum?: EmpresaSumOrderByAggregateInput
  }

  export type EmpresaScalarWhereWithAggregatesInput = {
    AND?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    OR?: EmpresaScalarWhereWithAggregatesInput[]
    NOT?: EmpresaScalarWhereWithAggregatesInput | EmpresaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Empresa"> | number
    nombre?: StringWithAggregatesFilter<"Empresa"> | string
    industria?: StringWithAggregatesFilter<"Empresa"> | string
    preferencias?: StringWithAggregatesFilter<"Empresa"> | string
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    correo?: StringFilter<"Cliente"> | string
    nombre?: StringFilter<"Cliente"> | string
    idEmpresa?: IntFilter<"Cliente"> | number
    empresa?: XOR<EmpresaScalarRelationFilter, EmpresaWhereInput>
    negociaciones?: NegociacionListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    correo?: SortOrder
    nombre?: SortOrder
    idEmpresa?: SortOrder
    empresa?: EmpresaOrderByWithRelationInput
    negociaciones?: NegociacionOrderByRelationAggregateInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    correo?: StringFilter<"Cliente"> | string
    nombre?: StringFilter<"Cliente"> | string
    idEmpresa?: IntFilter<"Cliente"> | number
    empresa?: XOR<EmpresaScalarRelationFilter, EmpresaWhereInput>
    negociaciones?: NegociacionListRelationFilter
  }, "id">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    correo?: SortOrder
    nombre?: SortOrder
    idEmpresa?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    correo?: StringWithAggregatesFilter<"Cliente"> | string
    nombre?: StringWithAggregatesFilter<"Cliente"> | string
    idEmpresa?: IntWithAggregatesFilter<"Cliente"> | number
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nombre?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    contraseña?: StringFilter<"Usuario"> | string
    negociaciones?: NegociacionListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    contraseña?: SortOrder
    negociaciones?: NegociacionOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nombre?: StringFilter<"Usuario"> | string
    contraseña?: StringFilter<"Usuario"> | string
    negociaciones?: NegociacionListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    contraseña?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    contraseña?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type NegociacionWhereInput = {
    AND?: NegociacionWhereInput | NegociacionWhereInput[]
    OR?: NegociacionWhereInput[]
    NOT?: NegociacionWhereInput | NegociacionWhereInput[]
    id?: IntFilter<"Negociacion"> | number
    idUsuarios?: IntFilter<"Negociacion"> | number
    idClientes?: IntFilter<"Negociacion"> | number
    idEstado?: IntFilter<"Negociacion"> | number
    fecha?: DateTimeFilter<"Negociacion"> | Date | string
    asunto?: StringFilter<"Negociacion"> | string
    descripcion?: StringFilter<"Negociacion"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    estado?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    productos?: ProductoNegociacionListRelationFilter
  }

  export type NegociacionOrderByWithRelationInput = {
    id?: SortOrder
    idUsuarios?: SortOrder
    idClientes?: SortOrder
    idEstado?: SortOrder
    fecha?: SortOrder
    asunto?: SortOrder
    descripcion?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
    estado?: EstadoOrderByWithRelationInput
    productos?: ProductoNegociacionOrderByRelationAggregateInput
  }

  export type NegociacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NegociacionWhereInput | NegociacionWhereInput[]
    OR?: NegociacionWhereInput[]
    NOT?: NegociacionWhereInput | NegociacionWhereInput[]
    idUsuarios?: IntFilter<"Negociacion"> | number
    idClientes?: IntFilter<"Negociacion"> | number
    idEstado?: IntFilter<"Negociacion"> | number
    fecha?: DateTimeFilter<"Negociacion"> | Date | string
    asunto?: StringFilter<"Negociacion"> | string
    descripcion?: StringFilter<"Negociacion"> | string
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    estado?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    productos?: ProductoNegociacionListRelationFilter
  }, "id">

  export type NegociacionOrderByWithAggregationInput = {
    id?: SortOrder
    idUsuarios?: SortOrder
    idClientes?: SortOrder
    idEstado?: SortOrder
    fecha?: SortOrder
    asunto?: SortOrder
    descripcion?: SortOrder
    _count?: NegociacionCountOrderByAggregateInput
    _avg?: NegociacionAvgOrderByAggregateInput
    _max?: NegociacionMaxOrderByAggregateInput
    _min?: NegociacionMinOrderByAggregateInput
    _sum?: NegociacionSumOrderByAggregateInput
  }

  export type NegociacionScalarWhereWithAggregatesInput = {
    AND?: NegociacionScalarWhereWithAggregatesInput | NegociacionScalarWhereWithAggregatesInput[]
    OR?: NegociacionScalarWhereWithAggregatesInput[]
    NOT?: NegociacionScalarWhereWithAggregatesInput | NegociacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Negociacion"> | number
    idUsuarios?: IntWithAggregatesFilter<"Negociacion"> | number
    idClientes?: IntWithAggregatesFilter<"Negociacion"> | number
    idEstado?: IntWithAggregatesFilter<"Negociacion"> | number
    fecha?: DateTimeWithAggregatesFilter<"Negociacion"> | Date | string
    asunto?: StringWithAggregatesFilter<"Negociacion"> | string
    descripcion?: StringWithAggregatesFilter<"Negociacion"> | string
  }

  export type EstadoWhereInput = {
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    id?: IntFilter<"Estado"> | number
    estado?: StringFilter<"Estado"> | string
    negociaciones?: NegociacionListRelationFilter
  }

  export type EstadoOrderByWithRelationInput = {
    id?: SortOrder
    estado?: SortOrder
    negociaciones?: NegociacionOrderByRelationAggregateInput
  }

  export type EstadoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    estado?: StringFilter<"Estado"> | string
    negociaciones?: NegociacionListRelationFilter
  }, "id">

  export type EstadoOrderByWithAggregationInput = {
    id?: SortOrder
    estado?: SortOrder
    _count?: EstadoCountOrderByAggregateInput
    _avg?: EstadoAvgOrderByAggregateInput
    _max?: EstadoMaxOrderByAggregateInput
    _min?: EstadoMinOrderByAggregateInput
    _sum?: EstadoSumOrderByAggregateInput
  }

  export type EstadoScalarWhereWithAggregatesInput = {
    AND?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    OR?: EstadoScalarWhereWithAggregatesInput[]
    NOT?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Estado"> | number
    estado?: StringWithAggregatesFilter<"Estado"> | string
  }

  export type ProductoServicioWhereInput = {
    AND?: ProductoServicioWhereInput | ProductoServicioWhereInput[]
    OR?: ProductoServicioWhereInput[]
    NOT?: ProductoServicioWhereInput | ProductoServicioWhereInput[]
    id?: IntFilter<"ProductoServicio"> | number
    nombre?: StringFilter<"ProductoServicio"> | string
    precio?: FloatFilter<"ProductoServicio"> | number
    negociaciones?: ProductoNegociacionListRelationFilter
  }

  export type ProductoServicioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    negociaciones?: ProductoNegociacionOrderByRelationAggregateInput
  }

  export type ProductoServicioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductoServicioWhereInput | ProductoServicioWhereInput[]
    OR?: ProductoServicioWhereInput[]
    NOT?: ProductoServicioWhereInput | ProductoServicioWhereInput[]
    nombre?: StringFilter<"ProductoServicio"> | string
    precio?: FloatFilter<"ProductoServicio"> | number
    negociaciones?: ProductoNegociacionListRelationFilter
  }, "id">

  export type ProductoServicioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
    _count?: ProductoServicioCountOrderByAggregateInput
    _avg?: ProductoServicioAvgOrderByAggregateInput
    _max?: ProductoServicioMaxOrderByAggregateInput
    _min?: ProductoServicioMinOrderByAggregateInput
    _sum?: ProductoServicioSumOrderByAggregateInput
  }

  export type ProductoServicioScalarWhereWithAggregatesInput = {
    AND?: ProductoServicioScalarWhereWithAggregatesInput | ProductoServicioScalarWhereWithAggregatesInput[]
    OR?: ProductoServicioScalarWhereWithAggregatesInput[]
    NOT?: ProductoServicioScalarWhereWithAggregatesInput | ProductoServicioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductoServicio"> | number
    nombre?: StringWithAggregatesFilter<"ProductoServicio"> | string
    precio?: FloatWithAggregatesFilter<"ProductoServicio"> | number
  }

  export type ProductoNegociacionWhereInput = {
    AND?: ProductoNegociacionWhereInput | ProductoNegociacionWhereInput[]
    OR?: ProductoNegociacionWhereInput[]
    NOT?: ProductoNegociacionWhereInput | ProductoNegociacionWhereInput[]
    idProducto?: IntFilter<"ProductoNegociacion"> | number
    idNegociacion?: IntFilter<"ProductoNegociacion"> | number
    cantidad?: IntFilter<"ProductoNegociacion"> | number
    producto?: XOR<ProductoServicioScalarRelationFilter, ProductoServicioWhereInput>
    negociacion?: XOR<NegociacionScalarRelationFilter, NegociacionWhereInput>
  }

  export type ProductoNegociacionOrderByWithRelationInput = {
    idProducto?: SortOrder
    idNegociacion?: SortOrder
    cantidad?: SortOrder
    producto?: ProductoServicioOrderByWithRelationInput
    negociacion?: NegociacionOrderByWithRelationInput
  }

  export type ProductoNegociacionWhereUniqueInput = Prisma.AtLeast<{
    idProducto_idNegociacion?: ProductoNegociacionIdProductoIdNegociacionCompoundUniqueInput
    AND?: ProductoNegociacionWhereInput | ProductoNegociacionWhereInput[]
    OR?: ProductoNegociacionWhereInput[]
    NOT?: ProductoNegociacionWhereInput | ProductoNegociacionWhereInput[]
    idProducto?: IntFilter<"ProductoNegociacion"> | number
    idNegociacion?: IntFilter<"ProductoNegociacion"> | number
    cantidad?: IntFilter<"ProductoNegociacion"> | number
    producto?: XOR<ProductoServicioScalarRelationFilter, ProductoServicioWhereInput>
    negociacion?: XOR<NegociacionScalarRelationFilter, NegociacionWhereInput>
  }, "idProducto_idNegociacion">

  export type ProductoNegociacionOrderByWithAggregationInput = {
    idProducto?: SortOrder
    idNegociacion?: SortOrder
    cantidad?: SortOrder
    _count?: ProductoNegociacionCountOrderByAggregateInput
    _avg?: ProductoNegociacionAvgOrderByAggregateInput
    _max?: ProductoNegociacionMaxOrderByAggregateInput
    _min?: ProductoNegociacionMinOrderByAggregateInput
    _sum?: ProductoNegociacionSumOrderByAggregateInput
  }

  export type ProductoNegociacionScalarWhereWithAggregatesInput = {
    AND?: ProductoNegociacionScalarWhereWithAggregatesInput | ProductoNegociacionScalarWhereWithAggregatesInput[]
    OR?: ProductoNegociacionScalarWhereWithAggregatesInput[]
    NOT?: ProductoNegociacionScalarWhereWithAggregatesInput | ProductoNegociacionScalarWhereWithAggregatesInput[]
    idProducto?: IntWithAggregatesFilter<"ProductoNegociacion"> | number
    idNegociacion?: IntWithAggregatesFilter<"ProductoNegociacion"> | number
    cantidad?: IntWithAggregatesFilter<"ProductoNegociacion"> | number
  }

  export type EmpresaCreateInput = {
    nombre: string
    industria: string
    preferencias: string
    clientes?: ClienteCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUncheckedCreateInput = {
    id?: number
    nombre: string
    industria: string
    preferencias: string
    clientes?: ClienteUncheckedCreateNestedManyWithoutEmpresaInput
  }

  export type EmpresaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    industria?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    industria?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteUncheckedUpdateManyWithoutEmpresaNestedInput
  }

  export type EmpresaCreateManyInput = {
    nombre: string
    industria: string
    preferencias: string
  }

  export type EmpresaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    industria?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
  }

  export type EmpresaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    industria?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateInput = {
    correo: string
    nombre: string
    empresa: EmpresaCreateNestedOneWithoutClientesInput
    negociaciones?: NegociacionCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    correo: string
    nombre: string
    idEmpresa: number
    negociaciones?: NegociacionUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    empresa?: EmpresaUpdateOneRequiredWithoutClientesNestedInput
    negociaciones?: NegociacionUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    idEmpresa?: IntFieldUpdateOperationsInput | number
    negociaciones?: NegociacionUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    correo: string
    nombre: string
    idEmpresa: number
  }

  export type ClienteUpdateManyMutationInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    idEmpresa?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioCreateInput = {
    nombre: string
    email: string
    contraseña: string
    negociaciones?: NegociacionCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nombre: string
    email: string
    contraseña: string
    negociaciones?: NegociacionUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    negociaciones?: NegociacionUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    negociaciones?: NegociacionUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    nombre: string
    email: string
    contraseña: string
  }

  export type UsuarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
  }

  export type NegociacionCreateInput = {
    fecha: Date | string
    asunto: string
    descripcion: string
    usuario: UsuarioCreateNestedOneWithoutNegociacionesInput
    cliente: ClienteCreateNestedOneWithoutNegociacionesInput
    estado: EstadoCreateNestedOneWithoutNegociacionesInput
    productos?: ProductoNegociacionCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionUncheckedCreateInput = {
    id?: number
    idUsuarios: number
    idClientes: number
    idEstado: number
    fecha: Date | string
    asunto: string
    descripcion: string
    productos?: ProductoNegociacionUncheckedCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutNegociacionesNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutNegociacionesNestedInput
    estado?: EstadoUpdateOneRequiredWithoutNegociacionesNestedInput
    productos?: ProductoNegociacionUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuarios?: IntFieldUpdateOperationsInput | number
    idClientes?: IntFieldUpdateOperationsInput | number
    idEstado?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    productos?: ProductoNegociacionUncheckedUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionCreateManyInput = {
    idUsuarios: number
    idClientes: number
    idEstado: number
    fecha: Date | string
    asunto: string
    descripcion: string
  }

  export type NegociacionUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type NegociacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuarios?: IntFieldUpdateOperationsInput | number
    idClientes?: IntFieldUpdateOperationsInput | number
    idEstado?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoCreateInput = {
    estado: string
    negociaciones?: NegociacionCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUncheckedCreateInput = {
    id?: number
    estado: string
    negociaciones?: NegociacionUncheckedCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUpdateInput = {
    estado?: StringFieldUpdateOperationsInput | string
    negociaciones?: NegociacionUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    negociaciones?: NegociacionUncheckedUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoCreateManyInput = {
    estado: string
  }

  export type EstadoUpdateManyMutationInput = {
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type ProductoServicioCreateInput = {
    nombre: string
    precio: number
    negociaciones?: ProductoNegociacionCreateNestedManyWithoutProductoInput
  }

  export type ProductoServicioUncheckedCreateInput = {
    id?: number
    nombre: string
    precio: number
    negociaciones?: ProductoNegociacionUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductoServicioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    negociaciones?: ProductoNegociacionUpdateManyWithoutProductoNestedInput
  }

  export type ProductoServicioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    negociaciones?: ProductoNegociacionUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductoServicioCreateManyInput = {
    nombre: string
    precio: number
  }

  export type ProductoServicioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductoServicioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductoNegociacionCreateInput = {
    cantidad: number
    producto: ProductoServicioCreateNestedOneWithoutNegociacionesInput
    negociacion: NegociacionCreateNestedOneWithoutProductosInput
  }

  export type ProductoNegociacionUncheckedCreateInput = {
    idProducto: number
    idNegociacion: number
    cantidad: number
  }

  export type ProductoNegociacionUpdateInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    producto?: ProductoServicioUpdateOneRequiredWithoutNegociacionesNestedInput
    negociacion?: NegociacionUpdateOneRequiredWithoutProductosNestedInput
  }

  export type ProductoNegociacionUncheckedUpdateInput = {
    idProducto?: IntFieldUpdateOperationsInput | number
    idNegociacion?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
  }

  export type ProductoNegociacionCreateManyInput = {
    idProducto: number
    idNegociacion: number
    cantidad: number
  }

  export type ProductoNegociacionUpdateManyMutationInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
  }

  export type ProductoNegociacionUncheckedUpdateManyInput = {
    idProducto?: IntFieldUpdateOperationsInput | number
    idNegociacion?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ClienteListRelationFilter = {
    every?: ClienteWhereInput
    some?: ClienteWhereInput
    none?: ClienteWhereInput
  }

  export type ClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmpresaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    industria?: SortOrder
    preferencias?: SortOrder
  }

  export type EmpresaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EmpresaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    industria?: SortOrder
    preferencias?: SortOrder
  }

  export type EmpresaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    industria?: SortOrder
    preferencias?: SortOrder
  }

  export type EmpresaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EmpresaScalarRelationFilter = {
    is?: EmpresaWhereInput
    isNot?: EmpresaWhereInput
  }

  export type NegociacionListRelationFilter = {
    every?: NegociacionWhereInput
    some?: NegociacionWhereInput
    none?: NegociacionWhereInput
  }

  export type NegociacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    nombre?: SortOrder
    idEmpresa?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    idEmpresa?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    nombre?: SortOrder
    idEmpresa?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    nombre?: SortOrder
    idEmpresa?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
    idEmpresa?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    contraseña?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    contraseña?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    contraseña?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type ClienteScalarRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type EstadoScalarRelationFilter = {
    is?: EstadoWhereInput
    isNot?: EstadoWhereInput
  }

  export type ProductoNegociacionListRelationFilter = {
    every?: ProductoNegociacionWhereInput
    some?: ProductoNegociacionWhereInput
    none?: ProductoNegociacionWhereInput
  }

  export type ProductoNegociacionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NegociacionCountOrderByAggregateInput = {
    id?: SortOrder
    idUsuarios?: SortOrder
    idClientes?: SortOrder
    idEstado?: SortOrder
    fecha?: SortOrder
    asunto?: SortOrder
    descripcion?: SortOrder
  }

  export type NegociacionAvgOrderByAggregateInput = {
    id?: SortOrder
    idUsuarios?: SortOrder
    idClientes?: SortOrder
    idEstado?: SortOrder
  }

  export type NegociacionMaxOrderByAggregateInput = {
    id?: SortOrder
    idUsuarios?: SortOrder
    idClientes?: SortOrder
    idEstado?: SortOrder
    fecha?: SortOrder
    asunto?: SortOrder
    descripcion?: SortOrder
  }

  export type NegociacionMinOrderByAggregateInput = {
    id?: SortOrder
    idUsuarios?: SortOrder
    idClientes?: SortOrder
    idEstado?: SortOrder
    fecha?: SortOrder
    asunto?: SortOrder
    descripcion?: SortOrder
  }

  export type NegociacionSumOrderByAggregateInput = {
    id?: SortOrder
    idUsuarios?: SortOrder
    idClientes?: SortOrder
    idEstado?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EstadoCountOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type EstadoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EstadoMaxOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type EstadoMinOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type EstadoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProductoServicioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
  }

  export type ProductoServicioAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type ProductoServicioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
  }

  export type ProductoServicioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    precio?: SortOrder
  }

  export type ProductoServicioSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProductoServicioScalarRelationFilter = {
    is?: ProductoServicioWhereInput
    isNot?: ProductoServicioWhereInput
  }

  export type NegociacionScalarRelationFilter = {
    is?: NegociacionWhereInput
    isNot?: NegociacionWhereInput
  }

  export type ProductoNegociacionIdProductoIdNegociacionCompoundUniqueInput = {
    idProducto: number
    idNegociacion: number
  }

  export type ProductoNegociacionCountOrderByAggregateInput = {
    idProducto?: SortOrder
    idNegociacion?: SortOrder
    cantidad?: SortOrder
  }

  export type ProductoNegociacionAvgOrderByAggregateInput = {
    idProducto?: SortOrder
    idNegociacion?: SortOrder
    cantidad?: SortOrder
  }

  export type ProductoNegociacionMaxOrderByAggregateInput = {
    idProducto?: SortOrder
    idNegociacion?: SortOrder
    cantidad?: SortOrder
  }

  export type ProductoNegociacionMinOrderByAggregateInput = {
    idProducto?: SortOrder
    idNegociacion?: SortOrder
    cantidad?: SortOrder
  }

  export type ProductoNegociacionSumOrderByAggregateInput = {
    idProducto?: SortOrder
    idNegociacion?: SortOrder
    cantidad?: SortOrder
  }

  export type ClienteCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ClienteCreateWithoutEmpresaInput, ClienteUncheckedCreateWithoutEmpresaInput> | ClienteCreateWithoutEmpresaInput[] | ClienteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutEmpresaInput | ClienteCreateOrConnectWithoutEmpresaInput[]
    createMany?: ClienteCreateManyEmpresaInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedManyWithoutEmpresaInput = {
    create?: XOR<ClienteCreateWithoutEmpresaInput, ClienteUncheckedCreateWithoutEmpresaInput> | ClienteCreateWithoutEmpresaInput[] | ClienteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutEmpresaInput | ClienteCreateOrConnectWithoutEmpresaInput[]
    createMany?: ClienteCreateManyEmpresaInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ClienteUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ClienteCreateWithoutEmpresaInput, ClienteUncheckedCreateWithoutEmpresaInput> | ClienteCreateWithoutEmpresaInput[] | ClienteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutEmpresaInput | ClienteCreateOrConnectWithoutEmpresaInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutEmpresaInput | ClienteUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ClienteCreateManyEmpresaInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutEmpresaInput | ClienteUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutEmpresaInput | ClienteUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteUncheckedUpdateManyWithoutEmpresaNestedInput = {
    create?: XOR<ClienteCreateWithoutEmpresaInput, ClienteUncheckedCreateWithoutEmpresaInput> | ClienteCreateWithoutEmpresaInput[] | ClienteUncheckedCreateWithoutEmpresaInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutEmpresaInput | ClienteCreateOrConnectWithoutEmpresaInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutEmpresaInput | ClienteUpsertWithWhereUniqueWithoutEmpresaInput[]
    createMany?: ClienteCreateManyEmpresaInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutEmpresaInput | ClienteUpdateWithWhereUniqueWithoutEmpresaInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutEmpresaInput | ClienteUpdateManyWithWhereWithoutEmpresaInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type EmpresaCreateNestedOneWithoutClientesInput = {
    create?: XOR<EmpresaCreateWithoutClientesInput, EmpresaUncheckedCreateWithoutClientesInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutClientesInput
    connect?: EmpresaWhereUniqueInput
  }

  export type NegociacionCreateNestedManyWithoutClienteInput = {
    create?: XOR<NegociacionCreateWithoutClienteInput, NegociacionUncheckedCreateWithoutClienteInput> | NegociacionCreateWithoutClienteInput[] | NegociacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutClienteInput | NegociacionCreateOrConnectWithoutClienteInput[]
    createMany?: NegociacionCreateManyClienteInputEnvelope
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
  }

  export type NegociacionUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<NegociacionCreateWithoutClienteInput, NegociacionUncheckedCreateWithoutClienteInput> | NegociacionCreateWithoutClienteInput[] | NegociacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutClienteInput | NegociacionCreateOrConnectWithoutClienteInput[]
    createMany?: NegociacionCreateManyClienteInputEnvelope
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
  }

  export type EmpresaUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<EmpresaCreateWithoutClientesInput, EmpresaUncheckedCreateWithoutClientesInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutClientesInput
    upsert?: EmpresaUpsertWithoutClientesInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<XOR<EmpresaUpdateToOneWithWhereWithoutClientesInput, EmpresaUpdateWithoutClientesInput>, EmpresaUncheckedUpdateWithoutClientesInput>
  }

  export type NegociacionUpdateManyWithoutClienteNestedInput = {
    create?: XOR<NegociacionCreateWithoutClienteInput, NegociacionUncheckedCreateWithoutClienteInput> | NegociacionCreateWithoutClienteInput[] | NegociacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutClienteInput | NegociacionCreateOrConnectWithoutClienteInput[]
    upsert?: NegociacionUpsertWithWhereUniqueWithoutClienteInput | NegociacionUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: NegociacionCreateManyClienteInputEnvelope
    set?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    disconnect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    delete?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    update?: NegociacionUpdateWithWhereUniqueWithoutClienteInput | NegociacionUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: NegociacionUpdateManyWithWhereWithoutClienteInput | NegociacionUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
  }

  export type NegociacionUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<NegociacionCreateWithoutClienteInput, NegociacionUncheckedCreateWithoutClienteInput> | NegociacionCreateWithoutClienteInput[] | NegociacionUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutClienteInput | NegociacionCreateOrConnectWithoutClienteInput[]
    upsert?: NegociacionUpsertWithWhereUniqueWithoutClienteInput | NegociacionUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: NegociacionCreateManyClienteInputEnvelope
    set?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    disconnect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    delete?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    update?: NegociacionUpdateWithWhereUniqueWithoutClienteInput | NegociacionUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: NegociacionUpdateManyWithWhereWithoutClienteInput | NegociacionUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
  }

  export type NegociacionCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NegociacionCreateWithoutUsuarioInput, NegociacionUncheckedCreateWithoutUsuarioInput> | NegociacionCreateWithoutUsuarioInput[] | NegociacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutUsuarioInput | NegociacionCreateOrConnectWithoutUsuarioInput[]
    createMany?: NegociacionCreateManyUsuarioInputEnvelope
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
  }

  export type NegociacionUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<NegociacionCreateWithoutUsuarioInput, NegociacionUncheckedCreateWithoutUsuarioInput> | NegociacionCreateWithoutUsuarioInput[] | NegociacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutUsuarioInput | NegociacionCreateOrConnectWithoutUsuarioInput[]
    createMany?: NegociacionCreateManyUsuarioInputEnvelope
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
  }

  export type NegociacionUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NegociacionCreateWithoutUsuarioInput, NegociacionUncheckedCreateWithoutUsuarioInput> | NegociacionCreateWithoutUsuarioInput[] | NegociacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutUsuarioInput | NegociacionCreateOrConnectWithoutUsuarioInput[]
    upsert?: NegociacionUpsertWithWhereUniqueWithoutUsuarioInput | NegociacionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NegociacionCreateManyUsuarioInputEnvelope
    set?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    disconnect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    delete?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    update?: NegociacionUpdateWithWhereUniqueWithoutUsuarioInput | NegociacionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NegociacionUpdateManyWithWhereWithoutUsuarioInput | NegociacionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
  }

  export type NegociacionUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<NegociacionCreateWithoutUsuarioInput, NegociacionUncheckedCreateWithoutUsuarioInput> | NegociacionCreateWithoutUsuarioInput[] | NegociacionUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutUsuarioInput | NegociacionCreateOrConnectWithoutUsuarioInput[]
    upsert?: NegociacionUpsertWithWhereUniqueWithoutUsuarioInput | NegociacionUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: NegociacionCreateManyUsuarioInputEnvelope
    set?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    disconnect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    delete?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    update?: NegociacionUpdateWithWhereUniqueWithoutUsuarioInput | NegociacionUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: NegociacionUpdateManyWithWhereWithoutUsuarioInput | NegociacionUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutNegociacionesInput = {
    create?: XOR<UsuarioCreateWithoutNegociacionesInput, UsuarioUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNegociacionesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutNegociacionesInput = {
    create?: XOR<ClienteCreateWithoutNegociacionesInput, ClienteUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutNegociacionesInput
    connect?: ClienteWhereUniqueInput
  }

  export type EstadoCreateNestedOneWithoutNegociacionesInput = {
    create?: XOR<EstadoCreateWithoutNegociacionesInput, EstadoUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutNegociacionesInput
    connect?: EstadoWhereUniqueInput
  }

  export type ProductoNegociacionCreateNestedManyWithoutNegociacionInput = {
    create?: XOR<ProductoNegociacionCreateWithoutNegociacionInput, ProductoNegociacionUncheckedCreateWithoutNegociacionInput> | ProductoNegociacionCreateWithoutNegociacionInput[] | ProductoNegociacionUncheckedCreateWithoutNegociacionInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutNegociacionInput | ProductoNegociacionCreateOrConnectWithoutNegociacionInput[]
    createMany?: ProductoNegociacionCreateManyNegociacionInputEnvelope
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
  }

  export type ProductoNegociacionUncheckedCreateNestedManyWithoutNegociacionInput = {
    create?: XOR<ProductoNegociacionCreateWithoutNegociacionInput, ProductoNegociacionUncheckedCreateWithoutNegociacionInput> | ProductoNegociacionCreateWithoutNegociacionInput[] | ProductoNegociacionUncheckedCreateWithoutNegociacionInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutNegociacionInput | ProductoNegociacionCreateOrConnectWithoutNegociacionInput[]
    createMany?: ProductoNegociacionCreateManyNegociacionInputEnvelope
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioUpdateOneRequiredWithoutNegociacionesNestedInput = {
    create?: XOR<UsuarioCreateWithoutNegociacionesInput, UsuarioUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutNegociacionesInput
    upsert?: UsuarioUpsertWithoutNegociacionesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutNegociacionesInput, UsuarioUpdateWithoutNegociacionesInput>, UsuarioUncheckedUpdateWithoutNegociacionesInput>
  }

  export type ClienteUpdateOneRequiredWithoutNegociacionesNestedInput = {
    create?: XOR<ClienteCreateWithoutNegociacionesInput, ClienteUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutNegociacionesInput
    upsert?: ClienteUpsertWithoutNegociacionesInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutNegociacionesInput, ClienteUpdateWithoutNegociacionesInput>, ClienteUncheckedUpdateWithoutNegociacionesInput>
  }

  export type EstadoUpdateOneRequiredWithoutNegociacionesNestedInput = {
    create?: XOR<EstadoCreateWithoutNegociacionesInput, EstadoUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutNegociacionesInput
    upsert?: EstadoUpsertWithoutNegociacionesInput
    connect?: EstadoWhereUniqueInput
    update?: XOR<XOR<EstadoUpdateToOneWithWhereWithoutNegociacionesInput, EstadoUpdateWithoutNegociacionesInput>, EstadoUncheckedUpdateWithoutNegociacionesInput>
  }

  export type ProductoNegociacionUpdateManyWithoutNegociacionNestedInput = {
    create?: XOR<ProductoNegociacionCreateWithoutNegociacionInput, ProductoNegociacionUncheckedCreateWithoutNegociacionInput> | ProductoNegociacionCreateWithoutNegociacionInput[] | ProductoNegociacionUncheckedCreateWithoutNegociacionInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutNegociacionInput | ProductoNegociacionCreateOrConnectWithoutNegociacionInput[]
    upsert?: ProductoNegociacionUpsertWithWhereUniqueWithoutNegociacionInput | ProductoNegociacionUpsertWithWhereUniqueWithoutNegociacionInput[]
    createMany?: ProductoNegociacionCreateManyNegociacionInputEnvelope
    set?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    disconnect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    delete?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    update?: ProductoNegociacionUpdateWithWhereUniqueWithoutNegociacionInput | ProductoNegociacionUpdateWithWhereUniqueWithoutNegociacionInput[]
    updateMany?: ProductoNegociacionUpdateManyWithWhereWithoutNegociacionInput | ProductoNegociacionUpdateManyWithWhereWithoutNegociacionInput[]
    deleteMany?: ProductoNegociacionScalarWhereInput | ProductoNegociacionScalarWhereInput[]
  }

  export type ProductoNegociacionUncheckedUpdateManyWithoutNegociacionNestedInput = {
    create?: XOR<ProductoNegociacionCreateWithoutNegociacionInput, ProductoNegociacionUncheckedCreateWithoutNegociacionInput> | ProductoNegociacionCreateWithoutNegociacionInput[] | ProductoNegociacionUncheckedCreateWithoutNegociacionInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutNegociacionInput | ProductoNegociacionCreateOrConnectWithoutNegociacionInput[]
    upsert?: ProductoNegociacionUpsertWithWhereUniqueWithoutNegociacionInput | ProductoNegociacionUpsertWithWhereUniqueWithoutNegociacionInput[]
    createMany?: ProductoNegociacionCreateManyNegociacionInputEnvelope
    set?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    disconnect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    delete?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    update?: ProductoNegociacionUpdateWithWhereUniqueWithoutNegociacionInput | ProductoNegociacionUpdateWithWhereUniqueWithoutNegociacionInput[]
    updateMany?: ProductoNegociacionUpdateManyWithWhereWithoutNegociacionInput | ProductoNegociacionUpdateManyWithWhereWithoutNegociacionInput[]
    deleteMany?: ProductoNegociacionScalarWhereInput | ProductoNegociacionScalarWhereInput[]
  }

  export type NegociacionCreateNestedManyWithoutEstadoInput = {
    create?: XOR<NegociacionCreateWithoutEstadoInput, NegociacionUncheckedCreateWithoutEstadoInput> | NegociacionCreateWithoutEstadoInput[] | NegociacionUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutEstadoInput | NegociacionCreateOrConnectWithoutEstadoInput[]
    createMany?: NegociacionCreateManyEstadoInputEnvelope
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
  }

  export type NegociacionUncheckedCreateNestedManyWithoutEstadoInput = {
    create?: XOR<NegociacionCreateWithoutEstadoInput, NegociacionUncheckedCreateWithoutEstadoInput> | NegociacionCreateWithoutEstadoInput[] | NegociacionUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutEstadoInput | NegociacionCreateOrConnectWithoutEstadoInput[]
    createMany?: NegociacionCreateManyEstadoInputEnvelope
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
  }

  export type NegociacionUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<NegociacionCreateWithoutEstadoInput, NegociacionUncheckedCreateWithoutEstadoInput> | NegociacionCreateWithoutEstadoInput[] | NegociacionUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutEstadoInput | NegociacionCreateOrConnectWithoutEstadoInput[]
    upsert?: NegociacionUpsertWithWhereUniqueWithoutEstadoInput | NegociacionUpsertWithWhereUniqueWithoutEstadoInput[]
    createMany?: NegociacionCreateManyEstadoInputEnvelope
    set?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    disconnect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    delete?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    update?: NegociacionUpdateWithWhereUniqueWithoutEstadoInput | NegociacionUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: NegociacionUpdateManyWithWhereWithoutEstadoInput | NegociacionUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
  }

  export type NegociacionUncheckedUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<NegociacionCreateWithoutEstadoInput, NegociacionUncheckedCreateWithoutEstadoInput> | NegociacionCreateWithoutEstadoInput[] | NegociacionUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: NegociacionCreateOrConnectWithoutEstadoInput | NegociacionCreateOrConnectWithoutEstadoInput[]
    upsert?: NegociacionUpsertWithWhereUniqueWithoutEstadoInput | NegociacionUpsertWithWhereUniqueWithoutEstadoInput[]
    createMany?: NegociacionCreateManyEstadoInputEnvelope
    set?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    disconnect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    delete?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    connect?: NegociacionWhereUniqueInput | NegociacionWhereUniqueInput[]
    update?: NegociacionUpdateWithWhereUniqueWithoutEstadoInput | NegociacionUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: NegociacionUpdateManyWithWhereWithoutEstadoInput | NegociacionUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
  }

  export type ProductoNegociacionCreateNestedManyWithoutProductoInput = {
    create?: XOR<ProductoNegociacionCreateWithoutProductoInput, ProductoNegociacionUncheckedCreateWithoutProductoInput> | ProductoNegociacionCreateWithoutProductoInput[] | ProductoNegociacionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutProductoInput | ProductoNegociacionCreateOrConnectWithoutProductoInput[]
    createMany?: ProductoNegociacionCreateManyProductoInputEnvelope
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
  }

  export type ProductoNegociacionUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<ProductoNegociacionCreateWithoutProductoInput, ProductoNegociacionUncheckedCreateWithoutProductoInput> | ProductoNegociacionCreateWithoutProductoInput[] | ProductoNegociacionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutProductoInput | ProductoNegociacionCreateOrConnectWithoutProductoInput[]
    createMany?: ProductoNegociacionCreateManyProductoInputEnvelope
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductoNegociacionUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ProductoNegociacionCreateWithoutProductoInput, ProductoNegociacionUncheckedCreateWithoutProductoInput> | ProductoNegociacionCreateWithoutProductoInput[] | ProductoNegociacionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutProductoInput | ProductoNegociacionCreateOrConnectWithoutProductoInput[]
    upsert?: ProductoNegociacionUpsertWithWhereUniqueWithoutProductoInput | ProductoNegociacionUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ProductoNegociacionCreateManyProductoInputEnvelope
    set?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    disconnect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    delete?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    update?: ProductoNegociacionUpdateWithWhereUniqueWithoutProductoInput | ProductoNegociacionUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ProductoNegociacionUpdateManyWithWhereWithoutProductoInput | ProductoNegociacionUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ProductoNegociacionScalarWhereInput | ProductoNegociacionScalarWhereInput[]
  }

  export type ProductoNegociacionUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<ProductoNegociacionCreateWithoutProductoInput, ProductoNegociacionUncheckedCreateWithoutProductoInput> | ProductoNegociacionCreateWithoutProductoInput[] | ProductoNegociacionUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: ProductoNegociacionCreateOrConnectWithoutProductoInput | ProductoNegociacionCreateOrConnectWithoutProductoInput[]
    upsert?: ProductoNegociacionUpsertWithWhereUniqueWithoutProductoInput | ProductoNegociacionUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: ProductoNegociacionCreateManyProductoInputEnvelope
    set?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    disconnect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    delete?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    connect?: ProductoNegociacionWhereUniqueInput | ProductoNegociacionWhereUniqueInput[]
    update?: ProductoNegociacionUpdateWithWhereUniqueWithoutProductoInput | ProductoNegociacionUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: ProductoNegociacionUpdateManyWithWhereWithoutProductoInput | ProductoNegociacionUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: ProductoNegociacionScalarWhereInput | ProductoNegociacionScalarWhereInput[]
  }

  export type ProductoServicioCreateNestedOneWithoutNegociacionesInput = {
    create?: XOR<ProductoServicioCreateWithoutNegociacionesInput, ProductoServicioUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: ProductoServicioCreateOrConnectWithoutNegociacionesInput
    connect?: ProductoServicioWhereUniqueInput
  }

  export type NegociacionCreateNestedOneWithoutProductosInput = {
    create?: XOR<NegociacionCreateWithoutProductosInput, NegociacionUncheckedCreateWithoutProductosInput>
    connectOrCreate?: NegociacionCreateOrConnectWithoutProductosInput
    connect?: NegociacionWhereUniqueInput
  }

  export type ProductoServicioUpdateOneRequiredWithoutNegociacionesNestedInput = {
    create?: XOR<ProductoServicioCreateWithoutNegociacionesInput, ProductoServicioUncheckedCreateWithoutNegociacionesInput>
    connectOrCreate?: ProductoServicioCreateOrConnectWithoutNegociacionesInput
    upsert?: ProductoServicioUpsertWithoutNegociacionesInput
    connect?: ProductoServicioWhereUniqueInput
    update?: XOR<XOR<ProductoServicioUpdateToOneWithWhereWithoutNegociacionesInput, ProductoServicioUpdateWithoutNegociacionesInput>, ProductoServicioUncheckedUpdateWithoutNegociacionesInput>
  }

  export type NegociacionUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<NegociacionCreateWithoutProductosInput, NegociacionUncheckedCreateWithoutProductosInput>
    connectOrCreate?: NegociacionCreateOrConnectWithoutProductosInput
    upsert?: NegociacionUpsertWithoutProductosInput
    connect?: NegociacionWhereUniqueInput
    update?: XOR<XOR<NegociacionUpdateToOneWithWhereWithoutProductosInput, NegociacionUpdateWithoutProductosInput>, NegociacionUncheckedUpdateWithoutProductosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ClienteCreateWithoutEmpresaInput = {
    correo: string
    nombre: string
    negociaciones?: NegociacionCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutEmpresaInput = {
    id?: number
    correo: string
    nombre: string
    negociaciones?: NegociacionUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutEmpresaInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutEmpresaInput, ClienteUncheckedCreateWithoutEmpresaInput>
  }

  export type ClienteCreateManyEmpresaInputEnvelope = {
    data: ClienteCreateManyEmpresaInput | ClienteCreateManyEmpresaInput[]
  }

  export type ClienteUpsertWithWhereUniqueWithoutEmpresaInput = {
    where: ClienteWhereUniqueInput
    update: XOR<ClienteUpdateWithoutEmpresaInput, ClienteUncheckedUpdateWithoutEmpresaInput>
    create: XOR<ClienteCreateWithoutEmpresaInput, ClienteUncheckedCreateWithoutEmpresaInput>
  }

  export type ClienteUpdateWithWhereUniqueWithoutEmpresaInput = {
    where: ClienteWhereUniqueInput
    data: XOR<ClienteUpdateWithoutEmpresaInput, ClienteUncheckedUpdateWithoutEmpresaInput>
  }

  export type ClienteUpdateManyWithWhereWithoutEmpresaInput = {
    where: ClienteScalarWhereInput
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyWithoutEmpresaInput>
  }

  export type ClienteScalarWhereInput = {
    AND?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    OR?: ClienteScalarWhereInput[]
    NOT?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    id?: IntFilter<"Cliente"> | number
    correo?: StringFilter<"Cliente"> | string
    nombre?: StringFilter<"Cliente"> | string
    idEmpresa?: IntFilter<"Cliente"> | number
  }

  export type EmpresaCreateWithoutClientesInput = {
    nombre: string
    industria: string
    preferencias: string
  }

  export type EmpresaUncheckedCreateWithoutClientesInput = {
    id?: number
    nombre: string
    industria: string
    preferencias: string
  }

  export type EmpresaCreateOrConnectWithoutClientesInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutClientesInput, EmpresaUncheckedCreateWithoutClientesInput>
  }

  export type NegociacionCreateWithoutClienteInput = {
    fecha: Date | string
    asunto: string
    descripcion: string
    usuario: UsuarioCreateNestedOneWithoutNegociacionesInput
    estado: EstadoCreateNestedOneWithoutNegociacionesInput
    productos?: ProductoNegociacionCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionUncheckedCreateWithoutClienteInput = {
    id?: number
    idUsuarios: number
    idEstado: number
    fecha: Date | string
    asunto: string
    descripcion: string
    productos?: ProductoNegociacionUncheckedCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionCreateOrConnectWithoutClienteInput = {
    where: NegociacionWhereUniqueInput
    create: XOR<NegociacionCreateWithoutClienteInput, NegociacionUncheckedCreateWithoutClienteInput>
  }

  export type NegociacionCreateManyClienteInputEnvelope = {
    data: NegociacionCreateManyClienteInput | NegociacionCreateManyClienteInput[]
  }

  export type EmpresaUpsertWithoutClientesInput = {
    update: XOR<EmpresaUpdateWithoutClientesInput, EmpresaUncheckedUpdateWithoutClientesInput>
    create: XOR<EmpresaCreateWithoutClientesInput, EmpresaUncheckedCreateWithoutClientesInput>
    where?: EmpresaWhereInput
  }

  export type EmpresaUpdateToOneWithWhereWithoutClientesInput = {
    where?: EmpresaWhereInput
    data: XOR<EmpresaUpdateWithoutClientesInput, EmpresaUncheckedUpdateWithoutClientesInput>
  }

  export type EmpresaUpdateWithoutClientesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    industria?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
  }

  export type EmpresaUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    industria?: StringFieldUpdateOperationsInput | string
    preferencias?: StringFieldUpdateOperationsInput | string
  }

  export type NegociacionUpsertWithWhereUniqueWithoutClienteInput = {
    where: NegociacionWhereUniqueInput
    update: XOR<NegociacionUpdateWithoutClienteInput, NegociacionUncheckedUpdateWithoutClienteInput>
    create: XOR<NegociacionCreateWithoutClienteInput, NegociacionUncheckedCreateWithoutClienteInput>
  }

  export type NegociacionUpdateWithWhereUniqueWithoutClienteInput = {
    where: NegociacionWhereUniqueInput
    data: XOR<NegociacionUpdateWithoutClienteInput, NegociacionUncheckedUpdateWithoutClienteInput>
  }

  export type NegociacionUpdateManyWithWhereWithoutClienteInput = {
    where: NegociacionScalarWhereInput
    data: XOR<NegociacionUpdateManyMutationInput, NegociacionUncheckedUpdateManyWithoutClienteInput>
  }

  export type NegociacionScalarWhereInput = {
    AND?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
    OR?: NegociacionScalarWhereInput[]
    NOT?: NegociacionScalarWhereInput | NegociacionScalarWhereInput[]
    id?: IntFilter<"Negociacion"> | number
    idUsuarios?: IntFilter<"Negociacion"> | number
    idClientes?: IntFilter<"Negociacion"> | number
    idEstado?: IntFilter<"Negociacion"> | number
    fecha?: DateTimeFilter<"Negociacion"> | Date | string
    asunto?: StringFilter<"Negociacion"> | string
    descripcion?: StringFilter<"Negociacion"> | string
  }

  export type NegociacionCreateWithoutUsuarioInput = {
    fecha: Date | string
    asunto: string
    descripcion: string
    cliente: ClienteCreateNestedOneWithoutNegociacionesInput
    estado: EstadoCreateNestedOneWithoutNegociacionesInput
    productos?: ProductoNegociacionCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionUncheckedCreateWithoutUsuarioInput = {
    id?: number
    idClientes: number
    idEstado: number
    fecha: Date | string
    asunto: string
    descripcion: string
    productos?: ProductoNegociacionUncheckedCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionCreateOrConnectWithoutUsuarioInput = {
    where: NegociacionWhereUniqueInput
    create: XOR<NegociacionCreateWithoutUsuarioInput, NegociacionUncheckedCreateWithoutUsuarioInput>
  }

  export type NegociacionCreateManyUsuarioInputEnvelope = {
    data: NegociacionCreateManyUsuarioInput | NegociacionCreateManyUsuarioInput[]
  }

  export type NegociacionUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: NegociacionWhereUniqueInput
    update: XOR<NegociacionUpdateWithoutUsuarioInput, NegociacionUncheckedUpdateWithoutUsuarioInput>
    create: XOR<NegociacionCreateWithoutUsuarioInput, NegociacionUncheckedCreateWithoutUsuarioInput>
  }

  export type NegociacionUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: NegociacionWhereUniqueInput
    data: XOR<NegociacionUpdateWithoutUsuarioInput, NegociacionUncheckedUpdateWithoutUsuarioInput>
  }

  export type NegociacionUpdateManyWithWhereWithoutUsuarioInput = {
    where: NegociacionScalarWhereInput
    data: XOR<NegociacionUpdateManyMutationInput, NegociacionUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type UsuarioCreateWithoutNegociacionesInput = {
    nombre: string
    email: string
    contraseña: string
  }

  export type UsuarioUncheckedCreateWithoutNegociacionesInput = {
    id?: number
    nombre: string
    email: string
    contraseña: string
  }

  export type UsuarioCreateOrConnectWithoutNegociacionesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutNegociacionesInput, UsuarioUncheckedCreateWithoutNegociacionesInput>
  }

  export type ClienteCreateWithoutNegociacionesInput = {
    correo: string
    nombre: string
    empresa: EmpresaCreateNestedOneWithoutClientesInput
  }

  export type ClienteUncheckedCreateWithoutNegociacionesInput = {
    id?: number
    correo: string
    nombre: string
    idEmpresa: number
  }

  export type ClienteCreateOrConnectWithoutNegociacionesInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutNegociacionesInput, ClienteUncheckedCreateWithoutNegociacionesInput>
  }

  export type EstadoCreateWithoutNegociacionesInput = {
    estado: string
  }

  export type EstadoUncheckedCreateWithoutNegociacionesInput = {
    id?: number
    estado: string
  }

  export type EstadoCreateOrConnectWithoutNegociacionesInput = {
    where: EstadoWhereUniqueInput
    create: XOR<EstadoCreateWithoutNegociacionesInput, EstadoUncheckedCreateWithoutNegociacionesInput>
  }

  export type ProductoNegociacionCreateWithoutNegociacionInput = {
    cantidad: number
    producto: ProductoServicioCreateNestedOneWithoutNegociacionesInput
  }

  export type ProductoNegociacionUncheckedCreateWithoutNegociacionInput = {
    idProducto: number
    cantidad: number
  }

  export type ProductoNegociacionCreateOrConnectWithoutNegociacionInput = {
    where: ProductoNegociacionWhereUniqueInput
    create: XOR<ProductoNegociacionCreateWithoutNegociacionInput, ProductoNegociacionUncheckedCreateWithoutNegociacionInput>
  }

  export type ProductoNegociacionCreateManyNegociacionInputEnvelope = {
    data: ProductoNegociacionCreateManyNegociacionInput | ProductoNegociacionCreateManyNegociacionInput[]
  }

  export type UsuarioUpsertWithoutNegociacionesInput = {
    update: XOR<UsuarioUpdateWithoutNegociacionesInput, UsuarioUncheckedUpdateWithoutNegociacionesInput>
    create: XOR<UsuarioCreateWithoutNegociacionesInput, UsuarioUncheckedCreateWithoutNegociacionesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutNegociacionesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutNegociacionesInput, UsuarioUncheckedUpdateWithoutNegociacionesInput>
  }

  export type UsuarioUpdateWithoutNegociacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateWithoutNegociacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUpsertWithoutNegociacionesInput = {
    update: XOR<ClienteUpdateWithoutNegociacionesInput, ClienteUncheckedUpdateWithoutNegociacionesInput>
    create: XOR<ClienteCreateWithoutNegociacionesInput, ClienteUncheckedCreateWithoutNegociacionesInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutNegociacionesInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutNegociacionesInput, ClienteUncheckedUpdateWithoutNegociacionesInput>
  }

  export type ClienteUpdateWithoutNegociacionesInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    empresa?: EmpresaUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteUncheckedUpdateWithoutNegociacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    idEmpresa?: IntFieldUpdateOperationsInput | number
  }

  export type EstadoUpsertWithoutNegociacionesInput = {
    update: XOR<EstadoUpdateWithoutNegociacionesInput, EstadoUncheckedUpdateWithoutNegociacionesInput>
    create: XOR<EstadoCreateWithoutNegociacionesInput, EstadoUncheckedCreateWithoutNegociacionesInput>
    where?: EstadoWhereInput
  }

  export type EstadoUpdateToOneWithWhereWithoutNegociacionesInput = {
    where?: EstadoWhereInput
    data: XOR<EstadoUpdateWithoutNegociacionesInput, EstadoUncheckedUpdateWithoutNegociacionesInput>
  }

  export type EstadoUpdateWithoutNegociacionesInput = {
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoUncheckedUpdateWithoutNegociacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type ProductoNegociacionUpsertWithWhereUniqueWithoutNegociacionInput = {
    where: ProductoNegociacionWhereUniqueInput
    update: XOR<ProductoNegociacionUpdateWithoutNegociacionInput, ProductoNegociacionUncheckedUpdateWithoutNegociacionInput>
    create: XOR<ProductoNegociacionCreateWithoutNegociacionInput, ProductoNegociacionUncheckedCreateWithoutNegociacionInput>
  }

  export type ProductoNegociacionUpdateWithWhereUniqueWithoutNegociacionInput = {
    where: ProductoNegociacionWhereUniqueInput
    data: XOR<ProductoNegociacionUpdateWithoutNegociacionInput, ProductoNegociacionUncheckedUpdateWithoutNegociacionInput>
  }

  export type ProductoNegociacionUpdateManyWithWhereWithoutNegociacionInput = {
    where: ProductoNegociacionScalarWhereInput
    data: XOR<ProductoNegociacionUpdateManyMutationInput, ProductoNegociacionUncheckedUpdateManyWithoutNegociacionInput>
  }

  export type ProductoNegociacionScalarWhereInput = {
    AND?: ProductoNegociacionScalarWhereInput | ProductoNegociacionScalarWhereInput[]
    OR?: ProductoNegociacionScalarWhereInput[]
    NOT?: ProductoNegociacionScalarWhereInput | ProductoNegociacionScalarWhereInput[]
    idProducto?: IntFilter<"ProductoNegociacion"> | number
    idNegociacion?: IntFilter<"ProductoNegociacion"> | number
    cantidad?: IntFilter<"ProductoNegociacion"> | number
  }

  export type NegociacionCreateWithoutEstadoInput = {
    fecha: Date | string
    asunto: string
    descripcion: string
    usuario: UsuarioCreateNestedOneWithoutNegociacionesInput
    cliente: ClienteCreateNestedOneWithoutNegociacionesInput
    productos?: ProductoNegociacionCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionUncheckedCreateWithoutEstadoInput = {
    id?: number
    idUsuarios: number
    idClientes: number
    fecha: Date | string
    asunto: string
    descripcion: string
    productos?: ProductoNegociacionUncheckedCreateNestedManyWithoutNegociacionInput
  }

  export type NegociacionCreateOrConnectWithoutEstadoInput = {
    where: NegociacionWhereUniqueInput
    create: XOR<NegociacionCreateWithoutEstadoInput, NegociacionUncheckedCreateWithoutEstadoInput>
  }

  export type NegociacionCreateManyEstadoInputEnvelope = {
    data: NegociacionCreateManyEstadoInput | NegociacionCreateManyEstadoInput[]
  }

  export type NegociacionUpsertWithWhereUniqueWithoutEstadoInput = {
    where: NegociacionWhereUniqueInput
    update: XOR<NegociacionUpdateWithoutEstadoInput, NegociacionUncheckedUpdateWithoutEstadoInput>
    create: XOR<NegociacionCreateWithoutEstadoInput, NegociacionUncheckedCreateWithoutEstadoInput>
  }

  export type NegociacionUpdateWithWhereUniqueWithoutEstadoInput = {
    where: NegociacionWhereUniqueInput
    data: XOR<NegociacionUpdateWithoutEstadoInput, NegociacionUncheckedUpdateWithoutEstadoInput>
  }

  export type NegociacionUpdateManyWithWhereWithoutEstadoInput = {
    where: NegociacionScalarWhereInput
    data: XOR<NegociacionUpdateManyMutationInput, NegociacionUncheckedUpdateManyWithoutEstadoInput>
  }

  export type ProductoNegociacionCreateWithoutProductoInput = {
    cantidad: number
    negociacion: NegociacionCreateNestedOneWithoutProductosInput
  }

  export type ProductoNegociacionUncheckedCreateWithoutProductoInput = {
    idNegociacion: number
    cantidad: number
  }

  export type ProductoNegociacionCreateOrConnectWithoutProductoInput = {
    where: ProductoNegociacionWhereUniqueInput
    create: XOR<ProductoNegociacionCreateWithoutProductoInput, ProductoNegociacionUncheckedCreateWithoutProductoInput>
  }

  export type ProductoNegociacionCreateManyProductoInputEnvelope = {
    data: ProductoNegociacionCreateManyProductoInput | ProductoNegociacionCreateManyProductoInput[]
  }

  export type ProductoNegociacionUpsertWithWhereUniqueWithoutProductoInput = {
    where: ProductoNegociacionWhereUniqueInput
    update: XOR<ProductoNegociacionUpdateWithoutProductoInput, ProductoNegociacionUncheckedUpdateWithoutProductoInput>
    create: XOR<ProductoNegociacionCreateWithoutProductoInput, ProductoNegociacionUncheckedCreateWithoutProductoInput>
  }

  export type ProductoNegociacionUpdateWithWhereUniqueWithoutProductoInput = {
    where: ProductoNegociacionWhereUniqueInput
    data: XOR<ProductoNegociacionUpdateWithoutProductoInput, ProductoNegociacionUncheckedUpdateWithoutProductoInput>
  }

  export type ProductoNegociacionUpdateManyWithWhereWithoutProductoInput = {
    where: ProductoNegociacionScalarWhereInput
    data: XOR<ProductoNegociacionUpdateManyMutationInput, ProductoNegociacionUncheckedUpdateManyWithoutProductoInput>
  }

  export type ProductoServicioCreateWithoutNegociacionesInput = {
    nombre: string
    precio: number
  }

  export type ProductoServicioUncheckedCreateWithoutNegociacionesInput = {
    id?: number
    nombre: string
    precio: number
  }

  export type ProductoServicioCreateOrConnectWithoutNegociacionesInput = {
    where: ProductoServicioWhereUniqueInput
    create: XOR<ProductoServicioCreateWithoutNegociacionesInput, ProductoServicioUncheckedCreateWithoutNegociacionesInput>
  }

  export type NegociacionCreateWithoutProductosInput = {
    fecha: Date | string
    asunto: string
    descripcion: string
    usuario: UsuarioCreateNestedOneWithoutNegociacionesInput
    cliente: ClienteCreateNestedOneWithoutNegociacionesInput
    estado: EstadoCreateNestedOneWithoutNegociacionesInput
  }

  export type NegociacionUncheckedCreateWithoutProductosInput = {
    id?: number
    idUsuarios: number
    idClientes: number
    idEstado: number
    fecha: Date | string
    asunto: string
    descripcion: string
  }

  export type NegociacionCreateOrConnectWithoutProductosInput = {
    where: NegociacionWhereUniqueInput
    create: XOR<NegociacionCreateWithoutProductosInput, NegociacionUncheckedCreateWithoutProductosInput>
  }

  export type ProductoServicioUpsertWithoutNegociacionesInput = {
    update: XOR<ProductoServicioUpdateWithoutNegociacionesInput, ProductoServicioUncheckedUpdateWithoutNegociacionesInput>
    create: XOR<ProductoServicioCreateWithoutNegociacionesInput, ProductoServicioUncheckedCreateWithoutNegociacionesInput>
    where?: ProductoServicioWhereInput
  }

  export type ProductoServicioUpdateToOneWithWhereWithoutNegociacionesInput = {
    where?: ProductoServicioWhereInput
    data: XOR<ProductoServicioUpdateWithoutNegociacionesInput, ProductoServicioUncheckedUpdateWithoutNegociacionesInput>
  }

  export type ProductoServicioUpdateWithoutNegociacionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type ProductoServicioUncheckedUpdateWithoutNegociacionesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
  }

  export type NegociacionUpsertWithoutProductosInput = {
    update: XOR<NegociacionUpdateWithoutProductosInput, NegociacionUncheckedUpdateWithoutProductosInput>
    create: XOR<NegociacionCreateWithoutProductosInput, NegociacionUncheckedCreateWithoutProductosInput>
    where?: NegociacionWhereInput
  }

  export type NegociacionUpdateToOneWithWhereWithoutProductosInput = {
    where?: NegociacionWhereInput
    data: XOR<NegociacionUpdateWithoutProductosInput, NegociacionUncheckedUpdateWithoutProductosInput>
  }

  export type NegociacionUpdateWithoutProductosInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutNegociacionesNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutNegociacionesNestedInput
    estado?: EstadoUpdateOneRequiredWithoutNegociacionesNestedInput
  }

  export type NegociacionUncheckedUpdateWithoutProductosInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuarios?: IntFieldUpdateOperationsInput | number
    idClientes?: IntFieldUpdateOperationsInput | number
    idEstado?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteCreateManyEmpresaInput = {
    correo: string
    nombre: string
  }

  export type ClienteUpdateWithoutEmpresaInput = {
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    negociaciones?: NegociacionUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    negociaciones?: NegociacionUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateManyWithoutEmpresaInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type NegociacionCreateManyClienteInput = {
    idUsuarios: number
    idEstado: number
    fecha: Date | string
    asunto: string
    descripcion: string
  }

  export type NegociacionUpdateWithoutClienteInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutNegociacionesNestedInput
    estado?: EstadoUpdateOneRequiredWithoutNegociacionesNestedInput
    productos?: ProductoNegociacionUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuarios?: IntFieldUpdateOperationsInput | number
    idEstado?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    productos?: ProductoNegociacionUncheckedUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuarios?: IntFieldUpdateOperationsInput | number
    idEstado?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type NegociacionCreateManyUsuarioInput = {
    idClientes: number
    idEstado: number
    fecha: Date | string
    asunto: string
    descripcion: string
  }

  export type NegociacionUpdateWithoutUsuarioInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutNegociacionesNestedInput
    estado?: EstadoUpdateOneRequiredWithoutNegociacionesNestedInput
    productos?: ProductoNegociacionUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    idClientes?: IntFieldUpdateOperationsInput | number
    idEstado?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    productos?: ProductoNegociacionUncheckedUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    idClientes?: IntFieldUpdateOperationsInput | number
    idEstado?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type ProductoNegociacionCreateManyNegociacionInput = {
    idProducto: number
    cantidad: number
  }

  export type ProductoNegociacionUpdateWithoutNegociacionInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    producto?: ProductoServicioUpdateOneRequiredWithoutNegociacionesNestedInput
  }

  export type ProductoNegociacionUncheckedUpdateWithoutNegociacionInput = {
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
  }

  export type ProductoNegociacionUncheckedUpdateManyWithoutNegociacionInput = {
    idProducto?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
  }

  export type NegociacionCreateManyEstadoInput = {
    idUsuarios: number
    idClientes: number
    fecha: Date | string
    asunto: string
    descripcion: string
  }

  export type NegociacionUpdateWithoutEstadoInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    usuario?: UsuarioUpdateOneRequiredWithoutNegociacionesNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutNegociacionesNestedInput
    productos?: ProductoNegociacionUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionUncheckedUpdateWithoutEstadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuarios?: IntFieldUpdateOperationsInput | number
    idClientes?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    productos?: ProductoNegociacionUncheckedUpdateManyWithoutNegociacionNestedInput
  }

  export type NegociacionUncheckedUpdateManyWithoutEstadoInput = {
    id?: IntFieldUpdateOperationsInput | number
    idUsuarios?: IntFieldUpdateOperationsInput | number
    idClientes?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    asunto?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type ProductoNegociacionCreateManyProductoInput = {
    idNegociacion: number
    cantidad: number
  }

  export type ProductoNegociacionUpdateWithoutProductoInput = {
    cantidad?: IntFieldUpdateOperationsInput | number
    negociacion?: NegociacionUpdateOneRequiredWithoutProductosNestedInput
  }

  export type ProductoNegociacionUncheckedUpdateWithoutProductoInput = {
    idNegociacion?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
  }

  export type ProductoNegociacionUncheckedUpdateManyWithoutProductoInput = {
    idNegociacion?: IntFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}